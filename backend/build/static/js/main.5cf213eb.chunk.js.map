{"version":3,"sources":["utils/loginStorage.tsx","utils/authenticationHelper.tsx","services/toursService.tsx","reducers/tourReducer.tsx","services/museumService.tsx","reducers/museumReducer.tsx","services/userService.tsx","reducers/userReducer.tsx","reducers/loginReducer.tsx","reducers/notificationReducer.tsx","services/keyService.tsx","reducers/keyReducer.tsx","store.tsx","components/MuseumPage/TourList.tsx","utils/DateTimeFunctions.tsx","utils/FormFields.tsx","components/AddTour/AddTourForm.tsx","components/MuseumPage/MuseumAdminPage.tsx","utils/Mapbox.tsx","components/MuseumPage/MuseumCustomerPage.tsx","components/MuseumPage/index.tsx","components/TourPage/updateTourModal.tsx","components/AddReserved/AddReservedForm.tsx","components/TourPage/reserveTourModal.tsx","components/TourPage/index.tsx","components/LoginPage/LoginForm.tsx","components/LoginPage/RegisterationForm.tsx","services/loginService.tsx","components/LoginPage/index.tsx","components/Logout/LogoutBar.tsx","components/NotificationBar/index.tsx","components/FindMuseums/index.tsx","components/ReservationPage/index.tsx","components/UserPage/CustomerUserPage/index.tsx","components/UserPage/AdminUserPage/AddMuseumForm.tsx","components/UserPage/AdminUserPage/AddMuseumModal.tsx","components/UserPage/AdminUserPage/index.tsx","components/UserPage/GuideUserPage/index.tsx","components/UserPage/index.tsx","App.tsx","index.tsx"],"names":["user","localStorage","setItem","JSON","stringify","getItem","parse","removeItem","loginStorage","headers","Authorization","token","getAll","a","axios","get","res","data","addTour","newTour","museumId","post","authenticationHelper","updateTour","tourId","put","deleteTour","delete","initialState","tours","finished","notification","message","error","dispatch","type","toursService","payload","tourName","response","tourReducer","state","action","reduce","memo","tour","_id","addMuseum","newMuseum","FormData","keys","Object","values","i","length","currentKey","append","image","name","updateMuseum","id","deleteMuseum","sendRequest","userId","removeRequest","museums","allMuseums","museumsService","museumReducer","museum","offeredTours","filter","t","getOne","addUser","newUser","updateUser","addUserToMuseum","deleteUser","addReservation","newReservation","confirmTour","users","userService","museumName","reservation","userReducer","admin","undefined","updatedAdmin","concat","u","username","passwordHash","login","loggedInUser","loginReducer","addNotification","notificationReducer","getKey","mapbox","keyReducer","rootReducer","combineReducers","key","createStore","composeWithDevTools","applyMiddleware","thunk","TourList","useDispatch","useParams","deleteATour","history","useHistory","useSelector","className","List","divided","map","Content","onClick","push","Item","lengthInMinutes","price","Button","museumHoursArray","open","openingHours","sun","mon","tue","wed","thu","fri","sat","closingHours","closed","dateToString","dateOrg","date","Date","day","getDate","month","getMonth","year","getFullYear","addTime","time","number","hours","parseInt","slice","minutes","hoursString","toString","minutesString","compareTime","compare","cHours","cMinutes","isTime","substr","Boolean","Number","NumberField","field","label","min","max","placeholder","Form","Field","style","color","TextField","SelectField","options","as","o","value","SelectArrayField","ArrayField","fieldName","render","arrayHelpers","language","index","remove","insert","ImageField","setFieldValue","useFormikContext","useField","accept","onChange","e","target","files","handleChange","DateField","selected","inline","TimeField","times","weekday","getDay","start","end","reservedTours","r","possible","currentTime","overlapping","find","possibleTimes","Header","Grid","centered","columns","GridColumn","initialValues","possibleLanguages","maxNumberOfPeople","tourInfo","AddTourForm","onSubmit","onCancel","initialTour","resetForm","validate","errors","isValid","dirty","setFieldTouched","touched","component","disabled","MuseumAdminPage","submitNewTour","toReservation","acceptUser","userToMuseum","TourShow","GridRow","groupName","guide","Column","confirmed","userRequests","Row","Icon","styles","position","width","height","Mapbox","lat","long","mapContainerRef","useRef","useEffect","isNaN","mapboxgl","accessToken","current","Map","container","center","zoom","ref","MuseumCustomerPage","openHours","numberOfTours","alreadySent","nextPage","next","setTourNumb","tourNumb","handleRequest","sendAdminRequest","useState","setTour","openInfo","Image","src","Label","Card","CardHeader","Description","extra","textAlign","location","m","MuseumPage","Loader","active","UpdateTourModal","modalOpen","onClose","Modal","closeIcon","paymentOptions","AddReservedForm","ready","setReady","chosenLanguage","numberOfPeople","groupAge","paymentMethod","email","groupInfo","requiredError","handleSubmit","textallign","Actions","ReserveTourModal","TourPage","tourid","museumid","updateModalOpen","setUpdateModalOpen","reserveModalOpen","setReserveModalOpen","openModal","closeModal","updateCurrentTour","reserveTour","handleUpdateSubmit","handleReserveSubmit","Table","celled","HeaderCell","includes","Body","Cell","l","password","LoginForm","languages","RegisterationForm","LoginPage","submitLogin","credentials","loginService","submitRegisteration","relaxed","stackable","LogoutBar","toPage","where","Menu","widths","header","NotificationBar","setMuseums","setTours","setUser","setNotification","setTimeout","show","n","FindMuseums","page","setPage","search","setSearch","toLocaleLowerCase","Container","Input","event","CardContent","size","description","museumInfo","Array","from","numberOfPages","EssentialInformation","RestInformation","ReservationPage","existingTour","CustomerUserPage","checkTimes","h","hString","mString","list","days","AddMuseumForm","d","basic","AddMuseumModal","AdminPage","setModalOpen","dispatchAddMuseum","to","TourPreview","Popup","trigger","GuideUserPage","toursToShow","setToursToShow","forEach","userTours","takeTour","UserPage","App","keyService","path","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.5cf213eb.chunk.js","sourcesContent":["import { LoggedInUser } from \"../types\"\r\n\r\nconst loggedKey = \"LoggedUser\"\r\n\r\nconst saveUser = (user: LoggedInUser) => {\r\n    localStorage.setItem(loggedKey, JSON.stringify(user));\r\n}\r\n\r\nconst loadUser = (): LoggedInUser | null => {\r\n    const user = localStorage.getItem(loggedKey);\r\n    if(!user) {\r\n        return null;\r\n    }\r\n    return JSON.parse(user);\r\n}\r\n\r\nconst logoutUser = () => {\r\n    localStorage.removeItem(loggedKey);\r\n}\r\n\r\nexport default {\r\n    saveUser,\r\n    loadUser,\r\n    logoutUser\r\n}","import loginStorage from \"./loginStorage\"\r\n\r\nconst getAuthenticationHeaders = () => {\r\n    const user = loginStorage.loadUser()\r\n    if(!user) {\r\n        return {\r\n            headers: { Authorization: `bearer FalseToken`}\r\n        }\r\n    }\r\n    return {\r\n        headers: { Authorization: `bearer ${user.token}` }\r\n    }\r\n}\r\n\r\nexport default {\r\n    getAuthenticationHeaders\r\n}","import axios from 'axios'\r\nimport { GuidedTour, NewTour, AddTourPayload } from '../types'\r\nimport authenticationHelper from '../utils/authenticationHelper'\r\n\r\nconst baseUrl = '/api/tour'\r\n\r\nconst getAll = async (): Promise<GuidedTour[]> => {\r\n    const res = await axios.get(baseUrl)\r\n    return res.data\r\n}\r\n\r\nconst addTour = async (newTour: NewTour, museumId: string): Promise<AddTourPayload> => {\r\n    const res = await axios.post(`${baseUrl}/museum/${museumId}`, newTour, authenticationHelper.getAuthenticationHeaders())\r\n    return res.data\r\n}\r\n\r\nconst updateTour = async (newTour: NewTour, museumId: string, tourId: string): Promise<GuidedTour> => {\r\n    const res = await axios.put(`${baseUrl}/${tourId}/museum/${museumId}`, newTour, authenticationHelper.getAuthenticationHeaders())\r\n    return res.data\r\n}\r\n\r\nconst deleteTour = async (museumId: string, tourId: string) => {\r\n    await axios.delete(`${baseUrl}/${tourId}/museum/${museumId}`, authenticationHelper.getAuthenticationHeaders());\r\n}\r\n\r\n\r\nexport default {\r\n    getAll,\r\n    addTour,\r\n    deleteTour,\r\n    updateTour\r\n}","import toursService from \"../services/toursService\"\r\nimport { GuidedTour, TourState, NewTour, MessageError } from \"../types\"\r\nimport { Dispatch } from \"react\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { RootState } from \"../store\"\r\n\r\nexport type Action= \r\n    | {\r\n        type: \"GET_ALL_TOURS_SUCCESS\"\r\n        payload: GuidedTour[],\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"GET_ALL_TOURS_ERROR\"\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"DELETE_TOUR_SUCCESS\"\r\n        id: string,\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"DELETE_TOUR_ERROR\",\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"UPDATE_TOUR_SUCCESS\"\r\n        payload: GuidedTour,\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"UPDATE_TOUR_ERROR\",\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"START_UPDATE\"\r\n    }\r\n\r\nconst initialState: TourState = {\r\n    tours: {},\r\n    finished: true,\r\n    notification: {message: \"\", error: true}\r\n}\r\n\r\nconst tourReducer = (state = initialState, action: Action): TourState => {\r\n    switch(action.type) {\r\n        case 'GET_ALL_TOURS_SUCCESS':\r\n            return {...state, notification: action.notification, finished: true, tours: {...action.payload.reduce((memo, tour: GuidedTour) => ({...memo, [tour._id]: tour}), {})}}\r\n        case 'GET_ALL_TOURS_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'UPDATE_TOUR_SUCCESS':\r\n            return {...state, notification: action.notification, finished: true, tours: {...state.tours, [action.payload._id]: {...action.payload}}}\r\n        case 'UPDATE_TOUR_ERROR':\r\n            return {...state, notification: action.notification}    \r\n        case 'START_UPDATE':\r\n            return {...state, finished: false}\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport const allTours = (): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload: GuidedTour[] = await toursService.getAll();\r\n            dispatch({\r\n                type:\"GET_ALL_TOURS_SUCCESS\",\r\n                payload,\r\n                notification: {message: \"\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type:\"GET_ALL_TOURS_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateTour = (newTour: NewTour, museumId: string, tourId: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type:\"START_UPDATE\"\r\n        })\r\n        try {\r\n            const payload: GuidedTour = await toursService.updateTour(newTour, museumId, tourId);\r\n            dispatch({\r\n                type:\"UPDATE_TOUR_SUCCESS\",\r\n                payload,\r\n                notification: {message: `${newTour.tourName} päivitetty!`, error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type:\"UPDATE_TOUR_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport default tourReducer","import axios from 'axios'\r\nimport { Museum, NewMuseum } from '../types'\r\nimport authenticationHelper from '../utils/authenticationHelper'\r\nimport FormData from 'form-data'\r\n\r\nconst baseUrl = '/api/museum'\r\n\r\nconst getAll = async (): Promise<Museum[]> => {\r\n    const res = await axios.get(baseUrl)\r\n    return res.data\r\n}\r\n\r\nconst addMuseum = async (newMuseum: NewMuseum): Promise<Museum> => {\r\n    let data = new FormData()\r\n    const keys = Object.keys(newMuseum);\r\n    const values = Object.values(newMuseum);\r\n    for(let i = 0; i < keys.length; i++) {\r\n        const currentKey = keys[i]\r\n        if(currentKey !== \"image\" && currentKey !== \"open\" && currentKey !== \"closed\") {\r\n            data.append(currentKey, values[i])\r\n        }\r\n        else if(currentKey !== \"image\") {\r\n            data.append(currentKey, JSON.stringify(values[i]))\r\n        }\r\n    } \r\n    if(newMuseum.image) {\r\n        data.append('image', newMuseum.image, newMuseum.image?.name)\r\n    }\r\n    const res = await axios.post(baseUrl, data, {headers: { Authorization: authenticationHelper.getAuthenticationHeaders().headers.Authorization, 'Content-Type': 'multipart/form-data'}})\r\n    return res.data\r\n}\r\n\r\nconst updateMuseum = async (newMuseum: NewMuseum, id: string): Promise<Museum> => {\r\n    const res = await axios.put(`${baseUrl}/${id}`, newMuseum, authenticationHelper.getAuthenticationHeaders())\r\n    return res.data\r\n}\r\n\r\nconst deleteMuseum = async (id: string) => {\r\n    await axios.delete(`${baseUrl}/${id}`, authenticationHelper.getAuthenticationHeaders());\r\n}\r\n\r\nconst sendRequest = async (userId: string, museumId: string) => {\r\n    const res = await axios.put(`${baseUrl}/${museumId}/request`, {id: userId})\r\n    return res.data\r\n}\r\n\r\nconst removeRequest = async(userId: string, museumId: string) => {\r\n    const res = await axios.put(`${baseUrl}/${museumId}/request/remove`, {id: userId}, authenticationHelper.getAuthenticationHeaders())\r\n    return res.data\r\n}   \r\n\r\nexport default {\r\n    getAll,\r\n    addMuseum,\r\n    deleteMuseum,\r\n    updateMuseum,\r\n    sendRequest,\r\n    removeRequest\r\n}","import museumsService from \"../services/museumService\"\r\nimport { Museum, MuseumState, NewMuseum, NewTour, AddTourPayload, GuidedTour, MessageError } from \"../types\"\r\nimport { Dispatch } from \"react\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { RootState } from \"../store\"\r\nimport toursService from \"../services/toursService\"\r\n\r\nexport type Action= \r\n    | {\r\n        type: \"GET_ALL_MUSEUMS_SUCCESS\"\r\n        payload: Museum[]\r\n        notification: MessageError\r\n    } \r\n    |{\r\n        type: \"GET_ALL_MUSEUMS_ERROR\"\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"DELETE_MUSEUM_SUCCESS\"\r\n        id: Museum['_id'],\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"DELETE_MUSEUM_ERROR\"\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"UPDATE_MUSEUM_SUCCESS\"\r\n        payload: Museum\r\n        notification: MessageError\r\n    } \r\n    | {\r\n        type: \"UPDATE_MUSEUM_ERROR\"\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"ADD_TOUR_SUCCESS\"\r\n        payload: AddTourPayload,\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"ADD_TOUR_ERROR\",\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"DELETE_TOUR_SUCCESS\"\r\n        museumId: Museum[\"_id\"];\r\n        tourId: GuidedTour[\"_id\"];\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"DELETE_TOUR_ERROR\",\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"USER_REQUEST_SUCCESS\",\r\n        payload: Museum,\r\n        notification: MessageError,\r\n    }\r\n    |{\r\n        type: \"USER_REQUEST_ERROR\",\r\n        notification: MessageError,\r\n    }\r\n    |{\r\n        type: \"REMOVE_REQUEST_SUCCESS\",\r\n        payload: Museum,\r\n        notification: MessageError,\r\n    }\r\n    |{\r\n        type: \"REMOVE_REQUEST_ERROR\",\r\n        notification: MessageError,\r\n    }\r\n    \r\n\r\nconst initialState: MuseumState = {\r\n    museums: {},\r\n    finished: true,\r\n    notification: {message: '', error: false}\r\n}\r\n\r\nconst museumReducer = (state = initialState, action: Action): MuseumState => {\r\n    switch(action.type) {\r\n        case 'GET_ALL_MUSEUMS_SUCCESS':\r\n            return {...state, notification: action.notification, museums: {...action.payload.reduce((memo, museum: Museum) => ({...memo, [museum._id]: museum}), {})}}\r\n        case 'GET_ALL_MUSEUMS_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'ADD_TOUR_SUCCESS':\r\n            return {...state, notification: action.notification, museums: {...state.museums, [action.payload.museumId]: {\r\n                ...state.museums[action.payload.museumId], offeredTours: [...state.museums[action.payload.museumId].offeredTours, action.payload.tour]\r\n            }}}\r\n        case 'ADD_TOUR_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'UPDATE_MUSEUM_SUCCESS':\r\n            return {...state, notification: action.notification, museums: {...state.museums, [action.payload._id]: {...action.payload}}}\r\n        case 'UPDATE_MUSEUM_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'DELETE_MUSEUM_SUCCESS':\r\n            return {...state, notification: action.notification, museums: Object.values(state.museums).filter(t => t._id !== action.id).reduce((memo, museum) => ({...memo, [museum._id]: museum}), {})}\r\n        case 'DELETE_MUSEUM_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'DELETE_TOUR_SUCCESS':\r\n            return {...state, notification: action.notification, museums: {...state.museums, [action.museumId]: {...state.museums[action.museumId], offeredTours: state.museums[action.museumId].offeredTours.filter(t => t._id !== action.tourId)}}}\r\n        case 'DELETE_TOUR_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'USER_REQUEST_SUCCESS':\r\n            return {...state, notification: action.notification, museums: {...state.museums, [action.payload._id]: {...action.payload}}}\r\n        case 'USER_REQUEST_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'REMOVE_REQUEST_SUCCESS':\r\n            return {...state, notification: action.notification, museums: {...state.museums, [action.payload._id]: {...action.payload}}}\r\n        case 'REMOVE_REQUEST_ERROR':\r\n            return {...state, notification: action.notification}\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport const allMuseums = (): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload: Museum[] = await museumsService.getAll();\r\n            const notification: MessageError = {\r\n                message: \"\",\r\n                error: false\r\n            }\r\n            dispatch({\r\n                type:\"GET_ALL_MUSEUMS_SUCCESS\",\r\n                payload,\r\n                notification: notification\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type:\"GET_ALL_MUSEUMS_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const addTour = (newTour: NewTour, museumId: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload: AddTourPayload = await toursService.addTour(newTour, museumId);\r\n            dispatch({\r\n                type:\"ADD_TOUR_SUCCESS\",\r\n                payload,\r\n                notification: {message: `${newTour.tourName} lisätty!`, error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"ADD_TOUR_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateMuseum = (newMuseum: NewMuseum, id: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try{\r\n            const payload: Museum = await museumsService.updateMuseum(newMuseum, id);\r\n            dispatch({\r\n                type:\"UPDATE_MUSEUM_SUCCESS\",\r\n                payload,\r\n                notification: {message: `${newMuseum.museumName} updated!`, error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"UPDATE_MUSEUM_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteMuseum = (id: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async(dispatch: Dispatch<Action>) => {\r\n        try {\r\n            await museumsService.deleteMuseum(id);\r\n            dispatch({\r\n                type:\"DELETE_MUSEUM_SUCCESS\",\r\n                id,\r\n                notification: {message: \"Museo poistettu\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"DELETE_MUSEUM_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteTour = (museumId: string, tourId: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async(dispatch: Dispatch<Action>) => {\r\n        try {\r\n            await toursService.deleteTour(museumId, tourId);\r\n            dispatch({\r\n                type:\"DELETE_TOUR_SUCCESS\",\r\n                tourId,\r\n                museumId,\r\n                notification: {message: \"Tour deleted\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"DELETE_TOUR_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const sendRequest = (userId: string, museumId: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async(dispatch: Dispatch<Action>) => {\r\n        try{\r\n            const payload = await museumsService.sendRequest(userId, museumId);\r\n            dispatch({\r\n                type: \"USER_REQUEST_SUCCESS\",\r\n                payload,\r\n                notification: {message: \"Pyyntö lähetetty\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"USER_REQUEST_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const removeRequest = (userId: string, museumId: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async(dispatch: Dispatch<Action>) => {\r\n        try{\r\n            const payload = await museumsService.removeRequest(userId, museumId);\r\n            dispatch({\r\n                type: \"REMOVE_REQUEST_SUCCESS\",\r\n                payload,\r\n                notification: {message: \"Pyyntö poistettu\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"REMOVE_REQUEST_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default museumReducer","import axios from 'axios'\r\nimport { UserAnyType, NewUser, ReservedTour } from '../types'\r\nimport authenticationHelper from '../utils/authenticationHelper'\r\n\r\nconst baseUrl = '/api/user'\r\n\r\nconst getAll = async (): Promise<UserAnyType[]> => {\r\n    const res = await axios.get(baseUrl)\r\n    return res.data\r\n}\r\n\r\nconst getOne = async (id: string): Promise<UserAnyType> => {\r\n    const res = await axios.get(`${baseUrl}/${id}`)\r\n    return res.data;\r\n}\r\n\r\nconst addUser = async (newUser: NewUser): Promise<UserAnyType> => {\r\n    const res = await axios.post(baseUrl, newUser)\r\n    return res.data\r\n}\r\n\r\nconst updateUser = async (newUser: NewUser, id: string): Promise<UserAnyType> => {\r\n    const res = await axios.put(`${baseUrl}/${id}`, newUser, authenticationHelper.getAuthenticationHeaders())\r\n    return res.data\r\n}\r\n\r\nconst addUserToMuseum = async (userId: string, museumId: string): Promise<UserAnyType> => {\r\n    const res = await axios.put(`${baseUrl}/${userId}/museum/${museumId}`,null, authenticationHelper.getAuthenticationHeaders());\r\n    return res.data\r\n}\r\n\r\nconst deleteUser = async (id: string) => {\r\n    await axios.delete(`${baseUrl}/${id}`, authenticationHelper.getAuthenticationHeaders());\r\n}\r\n\r\nconst addReservation = async(userId: string, museumId: string, newReservation: Omit<ReservedTour, '_id' | 'salary' | 'confirmed' | 'guide' | 'museum'>) => {\r\n    const res = await axios.post(`${baseUrl}/${userId}/museum/${museumId}/reservedtour`, newReservation, authenticationHelper.getAuthenticationHeaders())\r\n    return res.data\r\n}\r\n\r\nconst confirmTour = async (tourId: string, userId: string) => {\r\n    const res = await axios.put(`${baseUrl}/${userId}/tour/${tourId}`, null, authenticationHelper.getAuthenticationHeaders())\r\n    return res.data\r\n}\r\n\r\nexport default {\r\n    getAll,\r\n    getOne,\r\n    addUser,\r\n    deleteUser,\r\n    updateUser,\r\n    addUserToMuseum,\r\n    addReservation,\r\n    confirmTour\r\n}","import { UserAnyType, UserState, NewUser, NewMuseum, Museum, Admin, MessageError, ReservedTour } from \"../types\"\r\nimport { Dispatch } from \"react\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { RootState } from \"../store\"\r\nimport userService from \"../services/userService\"\r\nimport museumsService from \"../services/museumService\"\r\n\r\nexport type Action= \r\n    |{\r\n        type: \"GET_USERS_SUCCESS\"\r\n        payload: UserAnyType[]\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"GET_USERS_ERROR\"\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"ADD_USER_SUCCESS\"\r\n        payload: UserAnyType\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"ADD_USER_ERROR\"\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"DELETE_USER_SUCCESS\"\r\n        id: UserAnyType[\"_id\"]\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"DELETE_USER_ERROR\"\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"UPDATE_USER_SUCCESS\"\r\n        payload: UserAnyType\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"UPDATE_USER_ERROR\"\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"ADD_USER_TO_MUSEUM_SUCCESS\",\r\n        payload: UserAnyType\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"ADD_USER_TO_MUSEUM_ERROR\",\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"ADD_MUSEUM_SUCCESS\",\r\n        payload: Museum\r\n        id: string\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"ADD_MUSEUM_ERROR\",\r\n        notification: MessageError\r\n    } \r\n    | {\r\n        type: \"ADD_RESERVATION_SUCCESS\",\r\n        payload: UserAnyType\r\n        notification: MessageError\r\n    }\r\n    | {\r\n        type: \"ADD_RESERVATION_ERROR\",\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"CONFIRM_TOUR_SUCCESS\",\r\n        payload: UserAnyType,\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"CONFIRM_TOUR_ERROR\",\r\n        notification: MessageError\r\n    }\r\n    |{\r\n        type: \"START_UPDATE\"\r\n    }\r\n\r\nconst initialState: UserState = {\r\n    users: {},\r\n    finished: true,\r\n    notification: {message: \"\", error: false}\r\n}\r\n\r\nconst userReducer = (state = initialState, action: Action): UserState => {\r\n    switch(action.type) {\r\n        case 'GET_USERS_SUCCESS':\r\n            return {...state, notification: action.notification, users: {...action.payload.reduce((memo, user: UserAnyType) => ({...memo, [user._id]: user}), {})}}\r\n        case 'GET_USERS_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'ADD_USER_SUCCESS':\r\n            return {...state, notification: action.notification, users: {...state.users, [action.payload._id]: action.payload}}\r\n        case 'ADD_USER_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'UPDATE_USER_SUCCESS':\r\n            return {...state, notification: action.notification, users: {...state.users, [action.payload._id]: {...action.payload}}}\r\n        case 'UPDATE_USER_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'ADD_USER_TO_MUSEUM_SUCCESS':\r\n            return {...state, notification: action.notification, users: {...state.users, [action.payload._id]: {...action.payload}}}\r\n        case 'ADD_USER_TO_MUSEUM_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'ADD_MUSEUM_SUCCESS':\r\n            const user = state.users[action.id]\r\n            const admin: Admin | undefined = user.type === \"Admin\" ? user : undefined\r\n            if(!admin) {\r\n                return state\r\n            }\r\n            const updatedAdmin = {...admin, museums: admin.museums.concat(action.payload)}\r\n            return {...state, finished: true, notification: action.notification, users: {...state.users, [action.id]: updatedAdmin}}\r\n        case 'ADD_MUSEUM_ERROR':\r\n            return {...state, finished: true, notification: action.notification}\r\n        case 'DELETE_USER_SUCCESS':\r\n            return {...state, notification: action.notification, users: Object.values(state.users).filter(u => u._id !== action.id).reduce((memo, user) => ({...memo, [user._id]: user}), {})}\r\n        case 'DELETE_USER_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'ADD_RESERVATION_SUCCESS':\r\n            return {...state, notification: action.notification, users: {...state.users, [action.payload._id]: {...action.payload}}}\r\n        case 'ADD_RESERVATION_ERROR':\r\n            return  {...state, notification: action.notification}\r\n        case 'CONFIRM_TOUR_SUCCESS':\r\n            return {...state, notification: action.notification, users: {...state.users, [action.payload._id]: {...action.payload}}}\r\n        case 'CONFIRM_TOUR_ERROR':\r\n            return {...state, notification: action.notification}\r\n        case 'START_UPDATE':\r\n            return {...state, finished: false}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const getUsers = (): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload: UserAnyType[] = await userService.getAll();\r\n            dispatch({\r\n                type:\"GET_USERS_SUCCESS\",\r\n                payload,\r\n                notification: {message: \"\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"GET_USERS_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const addUser = (newUser: NewUser): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload: UserAnyType = await userService.addUser(newUser);\r\n            dispatch({\r\n                type: \"ADD_USER_SUCCESS\",\r\n                payload,\r\n                notification: {message: `${newUser.name} lisätty`, error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"ADD_USER_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n        \r\n    }\r\n}\r\n\r\nexport const addMuseum = (newMuseum: NewMuseum, id: UserAnyType[\"_id\"]): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type:\"START_UPDATE\"\r\n        })\r\n        try {\r\n            const payload: Museum = await museumsService.addMuseum(newMuseum);\r\n            dispatch({\r\n                type:\"ADD_MUSEUM_SUCCESS\",\r\n                payload,\r\n                id,\r\n                notification: {message: `${newMuseum.museumName} lisätty!`, error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"ADD_MUSEUM_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const userToMuseum = (userId: string, museumId: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload: UserAnyType = await userService.addUserToMuseum(userId, museumId);\r\n            dispatch({\r\n                type:\"ADD_USER_TO_MUSEUM_SUCCESS\",\r\n                payload,\r\n                notification: {message: \"Käyttäjä lisätty museoon\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"ADD_USER_TO_MUSEUM_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const updateUser = (newUser: NewUser, id: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload: UserAnyType = await userService.updateUser(newUser, id);\r\n            dispatch({\r\n                type:\"UPDATE_USER_SUCCESS\",\r\n                payload,\r\n                notification: {message: `${newUser.username} päivitetty!`, error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"UPDATE_USER_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const deleteUser = (id: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            await userService.deleteUser(id);\r\n            dispatch({\r\n                type:\"DELETE_USER_SUCCESS\",\r\n                id,\r\n                notification: {message: \"Käyttäjä poistettu!\", error: false}\r\n            })\r\n        } catch (e) {\r\n            dispatch({\r\n                type:\"DELETE_USER_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const addReservation = (userId: string, museumId: string, reservation: Omit<ReservedTour, '_id' | 'salary' | 'confirmed' | 'guide' | 'museum'>) => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload: UserAnyType = await userService.addReservation(userId, museumId, reservation)\r\n            dispatch({\r\n                type: \"ADD_RESERVATION_SUCCESS\",\r\n                payload,\r\n                notification: {message: \"Varaus lisätty\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type:\"ADD_RESERVATION_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\n\r\nexport const confirmTour = (tourId: string, userId: string): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async(dispatch: Dispatch<Action>) => {\r\n        try{\r\n            const payload = await userService.confirmTour(tourId, userId);\r\n            dispatch({\r\n                type: \"CONFIRM_TOUR_SUCCESS\",\r\n                payload,\r\n                notification: {message: \"Opastus varattu\", error: false}\r\n            })\r\n        } catch(e) {\r\n            dispatch({\r\n                type: \"CONFIRM_TOUR_ERROR\",\r\n                notification: {message: e.response.data, error: true}\r\n            })\r\n        }\r\n    }\r\n}\r\nexport default userReducer","import { LoginState, LoggedInUser, Museum } from \"../types\"\r\nimport { RootState } from \"../store\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { Dispatch } from \"react\"\r\n\r\nexport type Action= \r\n    | {\r\n        type: \"LOGIN\"\r\n        payload: LoggedInUser\r\n    }\r\n    | {\r\n        type: \"LOGOUT\"\r\n    }\r\n\r\nconst initialState: LoginState = {\r\n    _id: \"\",\r\n    username: \"\",\r\n    name: \"\",\r\n    passwordHash: \"\",\r\n    type: undefined,\r\n    token: \"\",\r\n}\r\n\r\nconst loginReducer = (state = initialState, action: Action): LoginState => {\r\n    switch(action.type) {\r\n        case 'LOGIN':\r\n            const { _id, username, name, passwordHash, type, token} = action.payload\r\n            let museums: Museum[] = [];\r\n            if(action.payload.type === \"Admin\") {\r\n                museums = action.payload.museums\r\n            }\r\n            return {_id, username, name, passwordHash, type, token, museums}\r\n        case 'LOGOUT':\r\n            return {_id: \"\", username: \"\", name: \"\", passwordHash: \"\", type: undefined, token: \"\", museums: []}\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport const login = (loggedInUser: LoggedInUser): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type:\"LOGIN\",\r\n            payload: loggedInUser\r\n        })\r\n    }\r\n}\r\n\r\nexport const logout = (): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type:\"LOGOUT\",\r\n        })\r\n    }\r\n}\r\n\r\nexport default loginReducer","import {  NotificationState, MessageError } from \"../types\"\r\nimport { Dispatch } from \"react\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { RootState } from \"../store\"\r\n\r\nexport type Action= \r\n    | {\r\n        type: \"ADD_NOTIFICATION\"\r\n        notification: MessageError\r\n    }\r\n\r\nconst initialState: NotificationState = {\r\n    notification: {message: '', error: false}\r\n}\r\n\r\nconst notificationReducer = (state = initialState, action: Action): NotificationState => {\r\n    switch(action.type) {\r\n        case 'ADD_NOTIFICATION':\r\n            return {...state, notification: action.notification}\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport const addNotification = (notification: MessageError): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        dispatch({\r\n            type:\"ADD_NOTIFICATION\",\r\n            notification\r\n        })\r\n    }\r\n}\r\n\r\nexport default notificationReducer","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/key'\r\n\r\nconst getKey = async (): Promise<string> => {\r\n    const res = await axios.get(baseUrl)\r\n    return res.data\r\n}\r\n\r\n\r\nexport default {\r\n    getKey\r\n}","import { KeyState } from \"../types\"\r\nimport { RootState } from \"../store\"\r\nimport { ThunkAction } from \"redux-thunk\"\r\nimport { Dispatch } from \"react\"\r\nimport keyService from \"../services/keyService\"\r\n\r\nexport type Action= \r\n    | {\r\n        type: \"GET_KEY\"\r\n        payload: string\r\n    }\r\n\r\nconst initialState: KeyState = {\r\n    mapbox: \"\"\r\n}\r\n\r\nconst keyReducer = (state = initialState, action: Action):KeyState => {\r\n    switch(action.type) {\r\n        case 'GET_KEY':\r\n            return {...state, mapbox: action.payload}\r\n        default: \r\n            return state\r\n    }\r\n}\r\n\r\nexport const getKey = (): ThunkAction<void, RootState, unknown, Action> => {\r\n    return async (dispatch: Dispatch<Action>) => {\r\n        try {\r\n            const payload = await keyService.getKey()\r\n            dispatch({\r\n                type:\"GET_KEY\",\r\n                payload\r\n            })\r\n        } catch {\r\n            return\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default keyReducer","import { createStore, combineReducers, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport thunk from 'redux-thunk'\r\nimport tourReducer from './reducers/tourReducer'\r\nimport museumReducer from './reducers/museumReducer'\r\nimport userReducer from './reducers/userReducer'\r\nimport loginReducer from './reducers/loginReducer'\r\nimport notificationReducer from './reducers/notificationReducer'\r\nimport keyReducer from './reducers/keyReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n    tours: tourReducer,\r\n    museums: museumReducer,\r\n    users: userReducer,\r\n    login: loginReducer,\r\n    notification: notificationReducer,\r\n    key: keyReducer\r\n})\r\n\r\nexport default createStore(rootReducer, composeWithDevTools(\r\n  applyMiddleware(thunk)\r\n))\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RootState } from '../../store'\r\nimport { List, Button } from 'semantic-ui-react'\r\nimport { deleteTour } from '../../reducers/museumReducer'\r\nimport { useParams, useHistory } from 'react-router-dom'\r\n\r\nconst TourList = () => {\r\n    const dispatch = useDispatch()\r\n    const { id } = useParams<{ id: string }>();\r\n    const deleteATour = (tourId: string) => {\r\n        dispatch(deleteTour(id, tourId))\r\n    }\r\n    const history = useHistory()\r\n    const tours = useSelector((state: RootState) => state.museums.museums[id]?.offeredTours) || undefined;\r\n\r\n    const toTour = (tourId: string) => {\r\n        history.push(`/museum/${id}/tour/${tourId}`)\r\n    }\r\n    if(!tours) {\r\n        return null\r\n    }\r\n    \r\n    return (\r\n        <div className=\"centerText\">\r\n            <List id=\"tourList\" divided>\r\n                {tours && Object.values(tours).map(t =>\r\n                    <List.Content key={t._id}>\r\n                        <b onClick={() => toTour(t._id)}> {t.tourName}</b>\r\n                        <List.List>\r\n                            <List.Item>{t.lengthInMinutes}</List.Item>\r\n                            <List.Item>{t.price}</List.Item>\r\n                        </List.List>\r\n                        <Button type=\"button\" onClick={() => deleteATour(t._id)}>Poista</Button>\r\n                    </List.Content>\r\n                )}\r\n            </List>    \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TourList","import { Museum } from \"../types\"\r\n\r\nexport const museumHoursArray = (open: boolean, museum: Museum) => {\r\n    const openingHours = [museum.open.sun, museum.open.mon, museum.open.tue, museum.open.wed, museum.open.thu, museum.open.fri, museum.open.sat]\r\n    const closingHours = [museum.closed.sun, museum.closed.mon, museum.closed.tue, museum.closed.wed, museum.closed.thu, museum.closed.fri, museum.closed.sat]\r\n    if(open) return openingHours\r\n    else return closingHours\r\n}\r\n\r\nexport const dateToString = (dateOrg: Date) => {\r\n    const date = new Date(dateOrg)\r\n    const day = date.getDate()\r\n    const month = date.getMonth() + 1\r\n    const year = date.getFullYear()\r\n\r\n    return `${day}.${month}.${year}`\r\n}\r\n\r\nexport const addTime = (time: string, number: number) => {\r\n    let hours = parseInt(time.slice(0,2), 10)\r\n    let minutes = parseInt(time.slice(3,5), 10)\r\n\r\n    hours = hours + (number - (number % 60)) / 60\r\n    minutes = minutes + number % 60\r\n\r\n    if(minutes < 0) {\r\n        hours = hours - 1\r\n        minutes = 60 + minutes\r\n    }\r\n    if(minutes > 59) {\r\n        hours = hours + 1\r\n        minutes = 0 + minutes - 60\r\n    }\r\n\r\n    if(hours < 0) {\r\n        hours = 0\r\n        minutes = 0\r\n    }\r\n\r\n    if(hours > 23) {\r\n        hours = 23\r\n        minutes = 59\r\n    }\r\n\r\n    let hoursString = hours.toString()\r\n    let minutesString = minutes.toString()\r\n    \r\n    if(hours < 10) {\r\n        hoursString = `0${hours}`\r\n    }\r\n    if(minutes < 10) {\r\n        minutesString = `0${minutes}`\r\n    }\r\n\r\n\r\n    return `${hoursString}:${minutesString}`\r\n}\r\n\r\nexport const compareTime = (time: string, compare: string) => {\r\n    let hours = parseInt(time.slice(0,2), 10)\r\n    let minutes = parseInt(time.slice(3,5), 10)\r\n    let cHours = parseInt(compare.slice(0,2), 10)\r\n    let cMinutes = parseInt(compare.slice(3,5), 10)\r\n\r\n    if(hours === cHours && minutes === cMinutes) return 0\r\n    if(hours > cHours) return 1\r\n    if(hours < cHours) return -1\r\n    if(minutes > cMinutes) return 1\r\n    return -1 \r\n}\r\n\r\nexport const isTime = (time: string): boolean => {\r\n    if(time === \"closed\") {\r\n        return true;\r\n    }\r\n    if(time.length !== 5) {\r\n        return false;\r\n    }\r\n    if(time.substr(2,1) !== \":\") {\r\n        return false;\r\n    }\r\n    let hours = time.substr(0,2);\r\n    let minutes = time.substr(3,2);\r\n\r\n    if(hours.substr(0,1) === \"0\") {\r\n        hours = hours.substr(1,1);\r\n    }\r\n    if(minutes.substr(0,1) === \"0\") {\r\n        minutes = minutes.substr(1,1);\r\n    }\r\n    return Boolean(Number(minutes) > -1 && Number(minutes) < 60 && Number(hours) > -1 && Number(hours) < 24);\r\n};","import React from 'react'\r\nimport { ErrorMessage, Field, FieldProps, FieldArray, useFormikContext, useField } from 'formik'\r\nimport { Form, Button, Grid, GridColumn, Header } from 'semantic-ui-react'\r\nimport { OptionField, Museum, ReservedTour, GuidedTour } from '../types';\r\nimport DatePicker from 'react-datepicker'\r\nimport { museumHoursArray, compareTime, addTime, dateToString, isTime } from './DateTimeFunctions';\r\n\r\ninterface NumberProps extends FieldProps {\r\n    label: string,\r\n    max: number,\r\n    min: number,\r\n    placeholder: string\r\n}\r\n\r\nexport const NumberField: React.FC<NumberProps> = ({field, label, min, max, placeholder}) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field placeholder={placeholder} {...field} type=\"number\" min={min} max={max} />\r\n        <div style={{ color:\"red\"}}>\r\n            <ErrorMessage name={field.name} />\r\n        </div>\r\n    </Form.Field>\r\n);\r\n\r\ninterface TextProps extends FieldProps {\r\n    label: string;\r\n    placeholder: string;\r\n}\r\n\r\nexport const TextField: React.FC<TextProps> = ({field, label, placeholder}) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field placeholder={placeholder} {...field}/>\r\n        <div style={{ color:\"red\"}}>\r\n            <ErrorMessage name={field.name} />\r\n        </div>\r\n    </Form.Field>\r\n)\r\n\r\ninterface TypeProps {\r\n    label: string;\r\n    name: string;\r\n    options: OptionField[];\r\n}\r\n\r\nexport const SelectField: React.FC<TypeProps> = ({label, name, options}: TypeProps) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field as=\"select\" className=\"ui dropdown\" name={name}>\r\n            {options.map((o: OptionField) => \r\n                <option key={o.label} value={o.value}>{o.label}</option>\r\n            )}\r\n        </Field>\r\n    </Form.Field>\r\n)\r\n\r\n\r\ninterface SelectArrayProps {\r\n    label: string;\r\n    name: string;\r\n    options: string[];\r\n}\r\n\r\nexport const SelectArrayField: React.FC<SelectArrayProps> = ({label, name, options}) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field as=\"select\" className=\"ui dropdown\" name={name}>\r\n            {options.map((o: string) => \r\n                <option key={o} value={o}>{o}</option>\r\n            )}\r\n        </Field>\r\n    </Form.Field>\r\n)\r\n\r\nexport const SelectTwoField: React.FC<SelectArrayProps & {optionsTwo: string}[]> = ({label, name, options}) => (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <Field as=\"select\" className=\"ui dropdown\" name={name}>\r\n            {options.map((o: string) => \r\n                <option key={o} value={o}>{o}</option>\r\n            )}\r\n        </Field>\r\n    </Form.Field>\r\n)\r\n\r\ninterface ArrayProps extends FieldProps {\r\n    fieldName: string;\r\n    label: string;\r\n    values: string[]\r\n}\r\nexport const ArrayField: React.FC<ArrayProps> = ({fieldName, field, label, values}) => {\r\n    const name = fieldName\r\n    return (\r\n    <Form.Field>\r\n        <label>{label}</label>\r\n        <FieldArray\r\n                        name={name}\r\n                        render={arrayHelpers => (\r\n                            <div>\r\n                                {values && values.length > 0 ? (\r\n                                    values.map((language, index) => (\r\n                                        <div key={index}>\r\n                                            <Field name={`${name}.${index}`} />\r\n                                            <Button className=\"add\" type=\"button\" onClick={() => arrayHelpers.remove(index)}>-</Button>\r\n                                            <Button className=\"add\" type=\"button\" onClick={() => arrayHelpers.insert(index, '')}>+</Button>\r\n                                        </div>\r\n                                    ))\r\n                                ) : (\r\n                                    <Button type=\"button\" onClick={() => arrayHelpers.push('')}>Lisää kieli</Button>\r\n                                )}\r\n                            </div>\r\n                        )}\r\n                    />\r\n        <div style={{ color:\"red\"}}>\r\n            <ErrorMessage name={field.name} />\r\n        </div>\r\n    </Form.Field>\r\n    )\r\n}\r\n\r\n\r\nexport const ImageField: React.FC<{name: string}> = ({name}) => {\r\n    const { setFieldValue }  = useFormikContext()\r\n    const [field] = useField(name)\r\n\r\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files) {\r\n            if(e.target.files[0]) {\r\n                setFieldValue(field.name, e.target.files[0])\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <input type='file' accept=\".jpg, .png\" name='file' id='fileInput' onChange={e => handleChange(e)}></input>\r\n    )\r\n}\r\n\r\nexport const DateField: React.FC<{name: string}> = ({name}) => {\r\n    const { setFieldValue } = useFormikContext()\r\n    const [field] = useField(name)\r\n    return (\r\n        <div>\r\n            <DatePicker \r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={(value: Date) => {\r\n                    setFieldValue(field.name, value)\r\n                    setFieldValue(\"time\", \"\")\r\n                }}\r\n                inline\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const TimeField: React.FC<{museum: Museum, name: string, date: Date, tour: GuidedTour}> = ({museum, name, date, tour}) => {\r\n    const possibleTimes = () => {\r\n        const weekday = date.getDay()\r\n        const openingHours = museumHoursArray(true, museum)\r\n        const closingHours = museumHoursArray(false, museum)\r\n        const start = openingHours[weekday]\r\n        const end = closingHours[weekday]\r\n        const reservedTours = museum.reservedTours.filter((r: ReservedTour) => dateToString(new Date(r.date)) === dateToString(new Date(date)))\r\n        let possible: string[] =[]\r\n        let time = start\r\n        \r\n        if (start === \"closed\" || end === \"closed\" ||  (dateToString(new Date()) === dateToString(date)) || new Date() > date\r\n            || !isTime(start) || !isTime(end)\r\n        ) {\r\n            return []\r\n        }\r\n\r\n        while(compareTime(time, addTime(end, (-tour.lengthInMinutes))) < 1) {\r\n            const currentTime = time\r\n            const overlapping = reservedTours.find((r: ReservedTour) => r.time === currentTime)\r\n            if(!overlapping) {\r\n                possible = possible.concat(time)\r\n                time = addTime(time, 15)\r\n            }\r\n            else {\r\n                time = addTime(time, overlapping.lengthInMinutes - (overlapping.lengthInMinutes % 15))\r\n                if(overlapping.lengthInMinutes % 15 !== 0) {\r\n                    time = addTime(time, 15)\r\n                }\r\n            }\r\n        }\r\n        return possible\r\n    }\r\n    const { setFieldValue } = useFormikContext()\r\n    const [field] = useField(name)\r\n    const times = possibleTimes()\r\n    return (\r\n        <div>\r\n            <Header>Valittu aika: {field.value}</Header>\r\n            <Grid centered columns={5}>\r\n                {times.length !== 0 && times.map((t:string) => \r\n                    <GridColumn key={t}>\r\n                        <b className={t} onClick={() => setFieldValue(field.name, t)}>{t}</b>\r\n                    </GridColumn>\r\n                )}\r\n                {times.length === 0 && \r\n                <Header>Ei vapaita aikoja</Header>\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { NumberField, TextField, ArrayField } from \"../../utils/FormFields\";\r\nimport { NewTour } from \"../../types\";\r\n\r\ninterface Props {\r\n    onSubmit: (values: NewTour) => void;\r\n    onCancel: () => void;\r\n    initialTour?: NewTour\r\n}\r\n\r\nconst initialValues: NewTour = {\r\n    possibleLanguages: [\"\"],\r\n    lengthInMinutes: 0,\r\n    tourName: \"\",\r\n    maxNumberOfPeople: 0,\r\n    price: 0,\r\n    tourInfo: \"\"\r\n}\r\nexport const AddTourForm: React.FC<Props> = ({ onSubmit, onCancel, initialTour }) => {\r\n    return (\r\n        <Formik\r\n        initialValues={initialTour || initialValues}\r\n        onSubmit={(values, { resetForm }) => {\r\n            onSubmit(values)\r\n            resetForm()\r\n        }}\r\n        validate={ values => {\r\n            const requiredError = \"Kenttä vaaditaan\";\r\n            const errors: { [field: string]: string | object} = {};\r\n            if(values.possibleLanguages.length === 0) {\r\n                errors.possibleLanguages = requiredError\r\n            }\r\n            if(!values.lengthInMinutes) {\r\n            }\r\n            if(!values.tourName) {\r\n                errors.tourName = requiredError\r\n            }\r\n            if(!values.maxNumberOfPeople) {\r\n                errors.maxNumberOfPeople = requiredError\r\n            }\r\n            if(!values.price) {\r\n                errors.price = requiredError\r\n            } \r\n            return errors;\r\n        }\r\n        }\r\n        >\r\n        {({ isValid, dirty, setFieldValue, setFieldTouched, values, errors, touched}) => {\r\n            return (\r\n                <Form className=\"form ui\">\r\n                    <Field\r\n                        label=\"Opastuksen nimi\"\r\n                        placeholder=\"Opastuksen nimi\"\r\n                        name=\"tourName\"\r\n                        component={TextField}\r\n                    />\r\n                    <Field\r\n                        label=\"Opastuksen kielet\"\r\n                        name=\"possibleLanguages\"\r\n                        fieldName=\"possibleLanguages\"\r\n                        component={ArrayField}\r\n                        values={values.possibleLanguages}\r\n                    />\r\n                    <Field\r\n                        label=\"Opastuksen kesto\"\r\n                        placeholder=\"Opastuksen kesto\"\r\n                        name=\"lengthInMinutes\"\r\n                        component={NumberField}\r\n                        min={0}\r\n                        max={1000}\r\n                    />\r\n                    <Field\r\n                        label=\"Opastuksen hinta\"\r\n                        placeholder=\"Opastuksen hinta\"\r\n                        name=\"price\"\r\n                        component={NumberField}\r\n                        min={0}\r\n                        max={1000}\r\n                    />\r\n                    <Field\r\n                        label=\"Opastuksen maksimikoko\"\r\n                        placeholder=\"Opastuksen maksimikoko\"\r\n                        name=\"maxNumberOfPeople\"\r\n                        component={NumberField}\r\n                        min={0}\r\n                        max={1000}\r\n                    />\r\n                    <Field\r\n                        label=\"Opastuksen lisätiedot\"\r\n                        placeholder=\"Opastuksen lisätiedot\"\r\n                        name=\"tourInfo\"\r\n                        component={TextField}\r\n                    />\r\n                    <Button type=\"submit\" name=\"submit\" disabled={!dirty || !isValid}>\r\n                        Lisää!\r\n                    </Button>\r\n                    {initialTour && <Button onClick={onCancel} name=\"cancelForm\" color=\"red\">Peruuta</Button>}\r\n                </Form>\r\n            )\r\n        }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddTourForm","import React from 'react'\r\nimport { Header, Grid, GridRow, GridColumn, Icon } from 'semantic-ui-react'\r\nimport TourList from './TourList'\r\nimport { AddTourForm } from '../AddTour/AddTourForm'\r\nimport { useDispatch } from 'react-redux'\r\nimport { addTour, removeRequest } from '../../reducers/museumReducer'\r\nimport { NewTour, Museum, ReservedTour, Professionals, UserAnyType } from '../../types'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { dateToString } from '../../utils/DateTimeFunctions'\r\nimport { userToMuseum } from '../../reducers/userReducer'\r\n\r\n\r\nconst MuseumAdminPage: React.FC<{museum: Museum}> = ({ museum }) => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const submitNewTour = async (newTour: NewTour) => {\r\n        dispatch(addTour(newTour, museum._id))\r\n    }\r\n\r\n    const toReservation = (id: ReservedTour['_id']) => {\r\n        history.push(`/reservation/${id}`)\r\n    }\r\n\r\n    const acceptUser = (userId: UserAnyType['_id']) => {\r\n        dispatch(userToMuseum(userId, museum._id))\r\n        dispatch(removeRequest(userId, museum._id))\r\n    }\r\n\r\n    const deleteRequest = (userId: UserAnyType['_id']) => {\r\n        dispatch(removeRequest(userId, museum._id))\r\n    }\r\n\r\n    const TourShow: React.FC<{r: ReservedTour}> = ({r}) => (\r\n        <GridRow key={r._id} columns={4} onClick={() => toReservation(r._id)}>\r\n            <GridColumn><b>{r.time} {dateToString(new Date(r.date))}</b></GridColumn>\r\n            <GridColumn><b> {r.tourName}</b></GridColumn>\r\n            <GridColumn><p>{r.groupName}</p></GridColumn>\r\n            <GridColumn><i>{r.guide.name}</i></GridColumn>\r\n        </GridRow>\r\n    )\r\n\r\n    if(!museum) {\r\n        return <Header as=\"h2\">Museota ei löytynyt</Header>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header as=\"h2\">Museon opastukset</Header>\r\n\r\n            <Grid centered id=\"basicGrid\" columns={1}>\r\n                <Grid centered divided='vertically' columns={2}>\r\n                        <Grid.Column>\r\n                            <Header className=\"centerText\" as=\"h3\">Nykyiset opastukset</Header>\r\n                            <TourList/>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Header className=\"centerText\" as=\"h3\">Lisää opastus</Header>\r\n                            <div className=\"centerText\">\r\n                                <AddTourForm onSubmit={submitNewTour} onCancel={() => {return}}/>\r\n                            </div>\r\n                        </Grid.Column>\r\n                </Grid>\r\n\r\n                <Grid className=\"addTopMargin\">\r\n                    <GridRow columns={3}>\r\n                        <Grid.Column>\r\n                            <Grid>\r\n                                <GridRow centered columns=\"1\">\r\n                                    <Header>Vahvistamattomat opastukset</Header>\r\n                                </GridRow>\r\n                                {museum.reservedTours.map((r: ReservedTour) => (!r.confirmed && (new Date(r.date) >= new Date())) ?\r\n                                    <GridRow key={r._id} columns={1} onClick={() => toReservation(r._id)}>\r\n                                        <TourShow r={r} key={r._id} />\r\n                                    </GridRow>\r\n                                    : null\r\n                                )}\r\n                            </Grid>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Grid>\r\n                                <GridRow centered columns=\"1\">\r\n                                    <Header>Vahvistetut opastukset</Header>\r\n                                </GridRow>\r\n                                {museum.reservedTours.map((r: ReservedTour) => (r.confirmed && (new Date(r.date) >= new Date())) ? \r\n                                    <GridRow key={r._id} columns={1} onClick={() => toReservation(r._id)}>\r\n                                        <TourShow r={r} key={r._id} />\r\n                                    </GridRow>\r\n                                    : null\r\n                                )}\r\n                            </Grid>\r\n                        </Grid.Column>\r\n                        <Grid.Column>\r\n                            <Grid>\r\n                                <GridRow columns=\"1\" centered>\r\n                                    <Header>Menneet opastukset</Header>\r\n                                </GridRow>\r\n                                {museum.reservedTours.map((r: ReservedTour) => (new Date(r.date) < new Date()) ? \r\n                                    <GridRow key={r._id} columns={1} onClick={() => toReservation(r._id)}>\r\n                                        <TourShow r={r} key={r._id} />\r\n                                    </GridRow>\r\n                                    : null\r\n                                )}\r\n                            </Grid>\r\n                        </Grid.Column>\r\n                    </GridRow>\r\n                </Grid>\r\n\r\n                <Grid className=\"addTopMargin\" columns=\"1\">\r\n                    <GridColumn>\r\n                        <Header className=\"centerText\">Käyttäjäpyynnöt</Header>\r\n                    </GridColumn>\r\n                    <Grid name=\"requests\" columns={4}>\r\n                        {museum.userRequests.map((u: Professionals) => {\r\n                            return(\r\n                                <Grid.Row centered key={u._id}>\r\n                                    <Grid.Column>\r\n                                        <div className=\"centerText\">\r\n                                            <p>{u.name}</p>\r\n                                        </div>\r\n                                    </Grid.Column>\r\n                                    <Grid.Column centered className=\"centerText\">\r\n                                        <div className=\"centerText\">\r\n                                            <b>{u.type}</b>\r\n                                        </div>\r\n                                    </Grid.Column>\r\n                                    <Grid.Column>\r\n                                        <div className=\"centerText\">\r\n                                            <Icon className=\"centerText\" name=\"heart outline\" color=\"blue\" onClick={() => acceptUser(u._id)}/>\r\n                                        </div>\r\n                                    </Grid.Column>\r\n                                    <Grid.Column>\r\n                                        <div className=\"centerText\">\r\n                                            <Icon className=\"centerText\" name=\"ban\" color=\"red\" onClick={() => deleteRequest(u._id)}/>\r\n                                        </div>  \r\n                                    </Grid.Column>  \r\n                                </Grid.Row>\r\n                            )\r\n                        }\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}   \r\n\r\nexport default MuseumAdminPage;","import React, {useEffect, useRef } from 'react'\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../store';\r\n\r\nconst styles = {\r\n    position: \"absolute\" as 'absolute',\r\n    width: \"100%\",\r\n    height: \"100%\"\r\n  };\r\n\r\nconst Mapbox: React.FC<{lat: number, long: number}> = ({lat, long}) => {\r\n    const mapContainerRef = useRef<HTMLDivElement>(null)\r\n    const key = useSelector((state: RootState) => state.key.mapbox)\r\n\r\n    useEffect(() => {\r\n        if(!lat || !long || isNaN(lat) || isNaN(long) || lat > 90 || lat < -90 || long > 90 || long < -90 || !key) {\r\n            return\r\n        }\r\n\r\n        mapboxgl.accessToken = key\r\n\r\n        if(!mapContainerRef.current) {\r\n            return;\r\n        }\r\n\r\n        const map = new mapboxgl.Map({\r\n            container: mapContainerRef.current,\r\n            style: 'mapbox://styles/mapbox/streets-v11',\r\n            center: [long, lat],\r\n            zoom: 15\r\n        })\r\n\r\n        return () => map.remove();\r\n    }, [lat, long, key])\r\n\r\n    return <div ref={mapContainerRef} style={styles}/>\r\n}\r\n\r\nexport default Mapbox","import React, { useState, useEffect } from 'react'\r\nimport { Museum, GuidedTour, UserAnyType, Professionals } from '../../types'\r\nimport { Image, Grid, GridColumn, GridRow, Header, Icon, Card, CardHeader, Button, Label } from 'semantic-ui-react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { sendRequest } from '../../reducers/museumReducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport Mapbox from '../../utils/Mapbox'\r\n\r\nconst MuseumCustomerPage: React.FC<{museum: Museum, user: UserAnyType}> = ({museum, user}) => {\r\n\r\n    const openHours = [\r\n        {day: \"Maanantai\", open: museum.open.mon, closed: museum.closed.mon},\r\n        {day: \"Tiistai\", open: museum.open.tue, closed: museum.closed.tue},\r\n        {day: \"Keskiviikko\", open: museum.open.wed, closed: museum.closed.wed},\r\n        {day: \"Torstai\", open: museum.open.thu, closed: museum.closed.thu},\r\n        {day: \"Perjantai\", open: museum.open.fri, closed: museum.closed.fri},\r\n        {day: \"Lauantai\", open: museum.open.sat, closed: museum.closed.sat},\r\n        {day: \"Sunnuntai\", open: museum.open.sun, closed: museum.closed.sun}\r\n    ]\r\n\r\n    const placeholderTour: GuidedTour = {\r\n        _id: \"0\",\r\n        possibleLanguages: [],\r\n        lengthInMinutes: 0,\r\n        tourName: \"Ei opastuksia\",\r\n        maxNumberOfPeople: 0,\r\n        price: 0,\r\n        tourInfo: \"Museo ei tarjoa tällä hetkellä opastuksia\"\r\n    }\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n\r\n    const numberOfTours = Object.values(museum.offeredTours).length\r\n    \r\n    const toTour = (museumId: Museum['_id'], tourId: GuidedTour['_id']) => {\r\n        history.push(`/museum/${museumId}/tour/${tourId}`)\r\n    }\r\n\r\n    const alreadySent  = Boolean(museum.userRequests.find((u: Professionals) => u._id === (user?user._id:false)));\r\n\r\n    const nextPage = (next: boolean) => {\r\n        if(numberOfTours < 2) {\r\n            return\r\n        }\r\n        if(next) {\r\n            if(tourNumb === numberOfTours - 1) {\r\n                setTourNumb(0)\r\n            } else {\r\n                setTourNumb(tourNumb + 1)\r\n            }\r\n        } else {\r\n            if(tourNumb === 0) {\r\n                setTourNumb(numberOfTours - 1)\r\n            } else {\r\n                setTourNumb(tourNumb - 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleRequest = async () => {\r\n        await sendAdminRequest();\r\n\r\n    }\r\n    const sendAdminRequest = async () => {\r\n\r\n        dispatch(sendRequest(user._id, museum._id))\r\n    }\r\n\r\n    const [tour, setTour]  = useState(placeholderTour)\r\n    const [tourNumb, setTourNumb] = useState<number>(0)\r\n\r\n    useEffect(() => {\r\n        if(numberOfTours !== 0) {\r\n            setTour(Object.values(museum.offeredTours)[0])\r\n        }\r\n    }, [museum.offeredTours, numberOfTours])\r\n    \r\n    useEffect(() => {\r\n        if(numberOfTours !== 0) {\r\n            setTour(Object.values(museum.offeredTours)[tourNumb])\r\n        }\r\n    }, [tourNumb, museum.offeredTours, numberOfTours])\r\n\r\n    return (\r\n        <div>\r\n            <Grid divided id=\"basicGrid\">\r\n                <GridRow columns=\"2\">\r\n                    <GridColumn className=\"addTopMargin\">\r\n                        <Grid columns=\"equal\">\r\n                            <GridRow>\r\n                                <GridColumn>\r\n                                    <Header>Aukiolo: </Header>\r\n                                </GridColumn>\r\n                            </GridRow>\r\n                            {openHours.map(o => \r\n                                <GridRow key={o.day}>\r\n                                    <GridColumn>\r\n                                        <h4>{o.day}: </h4>\r\n                                    </GridColumn>\r\n                                    <GridColumn>\r\n                                        <p>{o.open} - {o.closed}</p>\r\n                                    </GridColumn>\r\n                                </GridRow>  \r\n                            )}\r\n                            <GridRow>\r\n                                <GridColumn>\r\n                                    <h4>Lisätietoja: </h4>\r\n                                </GridColumn>\r\n                                <GridColumn>\r\n                                    <p>{museum.openInfo}</p>\r\n                                </GridColumn>\r\n                            </GridRow>\r\n                        </Grid>\r\n                    </GridColumn>\r\n                    <GridColumn className=\"addTopMargin\">\r\n                        <Grid>\r\n                            <GridRow centered>\r\n                                <Header>{museum.museumName}</Header>\r\n                            </GridRow>\r\n                            <GridRow centered>\r\n                                {museum.image && <Image src={`http://localhost:3001/uploads/${museum.image}`} />}\r\n                                {!museum.image && <Label> Ei kuvaa saatavilla</Label>} \r\n                            </GridRow>\r\n                            <GridRow centered>\r\n                                <Header>\r\n                                    Opastukset\r\n                                </Header>\r\n                            </GridRow>\r\n                            <GridRow centered>\r\n                                <GridColumn width=\"1\">\r\n                                    <Icon name=\"angle double left\" onClick={() => nextPage(false)}/>\r\n                                </GridColumn>\r\n                                <GridColumn width=\"10\">\r\n                                    <Card centered>\r\n                                        <Card.Content>\r\n                                            <CardHeader>{tour.tourName}</CardHeader>\r\n                                            <Card.Description>{tour.tourInfo}</Card.Description>\r\n                                            \r\n                                        </Card.Content>\r\n                                        {tour._id !== \"0\" &&  \r\n                                        <Card.Content id=\"extraInfo\" extra onClick={() => toTour(museum._id, tour._id)}>\r\n                                            <b>Lisätiedot ja varaukset</b>\r\n                                        </Card.Content>}\r\n                                    </Card>\r\n                                </GridColumn>\r\n                                <GridColumn>\r\n                                    <Icon name=\"angle double right\" onClick={() => nextPage(true)}/>\r\n                                </GridColumn>\r\n                            </GridRow>\r\n                        </Grid>\r\n                    </GridColumn>\r\n                </GridRow>\r\n                <GridRow centered>\r\n                    <Header textAlign=\"center\">Sijainti</Header>\r\n                </GridRow>\r\n                <GridRow centered>\r\n                    <b>{museum.location}</b>\r\n                </GridRow>\r\n                <GridRow centered>\r\n                    <div className=\"box\">\r\n                        <Mapbox lat={museum.lat} long={museum.long}/>\r\n                    </div>\r\n                </GridRow>\r\n                <GridRow className=\"addTopMargin\" centered>\r\n                    {user && user.type !== \"Customer\" && !user.museums.find((m: Museum) => m._id === museum._id) && \r\n                        <div>\r\n                            <p>Oletko tämän museon henkilökuntaa? Lähetä pyyntö!</p>\r\n                            <Button onClick={handleRequest} disabled={alreadySent}>Lähetä!</Button>\r\n                            {alreadySent && <p>Olet jo lähettänyt pyynnön</p>}\r\n                        </div>\r\n                    }\r\n                </GridRow>\r\n            </Grid>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MuseumCustomerPage","import React from 'react'\r\nimport { useParams } from 'react-router-dom'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../store'\r\nimport MuseumAdminPage from './MuseumAdminPage'\r\nimport { Museum } from '../../types'\r\nimport MuseumCustomerPage from './MuseumCustomerPage'\r\nimport { Loader } from 'semantic-ui-react'\r\n\r\nconst MuseumPage = () => {\r\n    const { id } = useParams<{ id: string }>()\r\n    const user = useSelector((state: RootState) => state.users.users[state.login._id]);\r\n    const museum: Museum = useSelector((state: RootState) => state.museums.museums[id])\r\n\r\n    if(!museum) {\r\n        return <Loader active/>\r\n    }\r\n    \r\n    if(user && user.type === \"Admin\" && user.museums.find((m: Museum) => m._id === museum._id)) {\r\n        return <MuseumAdminPage museum={museum} />\r\n    } else {\r\n        return <MuseumCustomerPage museum={museum} user={user}/>\r\n    }\r\n}\r\n\r\nexport default MuseumPage","import React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport AddTourForm from '../AddTour/AddTourForm'\r\nimport { NewTour } from '../../types'\r\n\r\ninterface Props {\r\n    modalOpen: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (values: NewTour) => void;\r\n    initialTour?: NewTour;\r\n}\r\n\r\nconst UpdateTourModal: React.FC<Props> = ({ modalOpen, onClose, onSubmit, initialTour}: Props) => (\r\n    <Modal id=\"updateTourModal\" open={modalOpen} onClose={onClose} closeIcon>\r\n        <Modal.Header>Päivitä opastusta</Modal.Header>\r\n        <Modal.Content>\r\n            <AddTourForm onSubmit={onSubmit} onCancel={onClose} initialTour={initialTour}></AddTourForm>\r\n        </Modal.Content>\r\n    </Modal>\r\n)\r\n\r\nexport default UpdateTourModal","import React, { useState } from 'react'\r\nimport { ReservedTour, Museum, GuidedTour, OptionField } from '../../types'\r\nimport { Formik, Field, Form } from 'formik'\r\nimport { TextField, SelectField, SelectArrayField, NumberField, DateField, TimeField } from '../../utils/FormFields'\r\nimport { Button, Grid, GridColumn, Modal, Header } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    onSubmit: (values: Omit<ReservedTour, '_id' | 'salary' | 'confirmed' | 'guide' | 'museum'>) => void;\r\n    onCancel: () => void;\r\n    tour: GuidedTour;\r\n    museum: Museum;\r\n}\r\n\r\nconst paymentOptions: OptionField[] = [\r\n    {label: \"Käteinen\", value: \"Cash\"},\r\n    {label: \"Lasku\", value: \"Bill\"},\r\n    {label: \"Maksukortti\", value: \"Card\"},\r\n    {label: \"Jokin muu, tarkenna lisätiedoissa\", value: \"Other\"}\r\n]\r\n\r\nconst AddReservedForm: React.FC<Props> = ({ onSubmit, onCancel, tour, museum}) => {\r\n\r\n    const [ready, setReady] = useState<boolean>(false);\r\n\r\n    const initialValues:Omit<ReservedTour, '_id' | 'salary' | 'confirmed' | 'guide' | 'museum'> = {\r\n        ...tour,\r\n        chosenLanguage: \"\",\r\n        groupName: \"\",\r\n        numberOfPeople: 0,\r\n        groupAge: \"\",\r\n        paymentMethod: \"Cash\",\r\n        time: \"\",\r\n        date: new Date(),\r\n        email: \"\",\r\n        groupInfo: \"\",\r\n    }\r\n\r\n    return (\r\n        <Formik\r\n        initialValues={{...initialValues, chosenLanguage: Object.values(tour.possibleLanguages)[0]}}\r\n        onSubmit={(values, { resetForm }) => {\r\n            onSubmit(values)\r\n            setReady(false)\r\n            resetForm()\r\n        }}\r\n        validate={ values => {\r\n            const requiredError = \"Kenttä vaaditaan\";\r\n            const errors: { [field: string]: string | object} = {};\r\n            if(!values.chosenLanguage) {\r\n                errors.chosenLanguage = requiredError\r\n            }\r\n            if(!values.groupName) {\r\n                errors.groupName = requiredError\r\n            }\r\n            if(!values.numberOfPeople) {\r\n                errors.numberOfPeople = requiredError\r\n            }\r\n            if(values.numberOfPeople > tour.maxNumberOfPeople) {\r\n                errors.numberOfPeople = `Liian monta osallistujaa. Max. ${tour.maxNumberOfPeople}`\r\n            }\r\n            if(!values.groupAge) {\r\n                errors.groupAge = requiredError\r\n            }\r\n            if(!values.paymentMethod) {\r\n                errors.paymentMethod = requiredError\r\n            } \r\n            if(!values.time) {\r\n                errors.time = requiredError\r\n            }\r\n            if(!values.date) {\r\n                errors.date = requiredError\r\n            }\r\n            if(!values.email) {\r\n                errors.email = requiredError\r\n            }\r\n            return errors;\r\n        }\r\n        }\r\n        >\r\n        {({ isValid, dirty, setFieldValue, setFieldTouched, values, errors, touched, handleSubmit}) => {\r\n            return (\r\n                <Form className=\"form ui\">\r\n                    <Field\r\n                        label=\"Ryhmän nimi\"\r\n                        placeholder=\"Ryhmän nimi\"\r\n                        name=\"groupName\"\r\n                        component={TextField}\r\n                    />\r\n                    <SelectArrayField\r\n                        label=\"Valittu kieli\"\r\n                        name=\"chosenLanguage\"\r\n                        options={tour.possibleLanguages}\r\n                    />\r\n                    <Field\r\n                        label=\"Osallistujien määrä\"\r\n                        placeholder=\"Osallistujien määrä\"\r\n                        name=\"numberOfPeople\"\r\n                        component={NumberField}\r\n                        min={1}\r\n                        max={tour.maxNumberOfPeople}\r\n                    />\r\n                    <Field\r\n                        label=\"Osallistujien ikäryhmä\"\r\n                        placeholder=\"Osallistujien ikäryhmä\"\r\n                        name=\"groupAge\"\r\n                        component={TextField}\r\n                    />\r\n                    <SelectField\r\n                        label=\"Maksutapa\"\r\n                        name=\"paymentOptions\"\r\n                        options={paymentOptions}\r\n                    />\r\n                    \r\n                    <Field\r\n                        label=\"Lisätiedot\"\r\n                        placeholder=\"Lisätiedot\"\r\n                        name=\"groupInfo\"\r\n                        component={TextField}\r\n                    />\r\n\r\n                    <Field\r\n                        label=\"Sähköposti\"\r\n                        placeholder=\"Sähköposti\"\r\n                        name=\"email\"\r\n                        component={TextField}\r\n                    />\r\n                    <Grid columns={2}>\r\n                        <GridColumn>\r\n                            <DateField\r\n                                name=\"date\"\r\n                            />\r\n                        </GridColumn>\r\n                        <GridColumn>\r\n                            <TimeField\r\n                                name=\"time\"\r\n                                museum={museum}\r\n                                tour={tour}\r\n                                date={values.date}\r\n                            />\r\n                        </GridColumn>\r\n                    </Grid>\r\n\r\n                    <Modal textallign=\"center\" open={ready} name=\"confirm\">\r\n                        <Header>Varmistus</Header>\r\n                        <Modal.Content>\r\n                            Hyväksy varaus antamillasi tiedoilla?\r\n                        </Modal.Content>\r\n                        <Modal.Actions>\r\n                            <Button color=\"green\"type='submit' name='submit' onClick={() => handleSubmit()}>Varaa!</Button>\r\n                            <Button color=\"red\" type=\"button\" name='closeConfirmation' onClick={() => {setReady(false)}}>Peruuta</Button>\r\n                        </Modal.Actions>\r\n                    </Modal>\r\n                    <Button type=\"button\" onClick={() => setReady(true)} name=\"ready\" disabled={!isValid || !dirty}>\r\n                        Varaa!\r\n                    </Button>\r\n                    <Button type=\"button\" onClick={onCancel} name=\"cancelForm\" color=\"red\">Peruuta</Button>\r\n                    \r\n                </Form>\r\n            )\r\n        }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddReservedForm","import React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { GuidedTour, Museum, ReservedTour } from '../../types'\r\nimport AddReservedForm from '../AddReserved/AddReservedForm'\r\n\r\ninterface Props {\r\n    modalOpen: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (values: Omit<ReservedTour, '_id' | 'salary' | 'confirmed' | 'guide' | 'museum'>) => void;\r\n    tour: GuidedTour;\r\n    museum: Museum;\r\n}\r\n\r\nconst ReserveTourModal: React.FC<Props> = ({ modalOpen, onClose, onSubmit, tour, museum}: Props) => (\r\n    <Modal id=\"reserveTourModal\" open={modalOpen} onClose={onClose} closeIcon>\r\n        <Modal.Header id=\"modalHeader\">Varaa opastus</Modal.Header>\r\n        <Modal.Content>\r\n            <AddReservedForm onSubmit={onSubmit} onCancel={onClose} tour={tour} museum={museum}></AddReservedForm>\r\n        </Modal.Content>\r\n    </Modal>\r\n)\r\n\r\nexport default ReserveTourModal","import React, { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RootState } from '../../store'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Table, Header, Button } from 'semantic-ui-react'\r\nimport { updateTour } from '../../reducers/tourReducer'\r\nimport { NewTour, ReservedTour } from '../../types'\r\nimport UpdateTourModal from './updateTourModal'\r\nimport { allMuseums } from '../../reducers/museumReducer'\r\nimport ReserveTourModal from './reserveTourModal'\r\nimport { addReservation } from '../../reducers/userReducer'\r\n\r\nconst TourPage: React.FC = () => {\r\n    const { tourid, museumid }= useParams<{ tourid: string, museumid: string }>();\r\n    \r\n    const dispatch = useDispatch()\r\n    const museum = useSelector((state: RootState) => state.museums.museums[museumid])\r\n    const finished = useSelector((state: RootState) => state.tours.finished)\r\n    const user = useSelector((state: RootState) => state.users.users[state.login._id]);\r\n\r\n    useEffect(() => {\r\n        dispatch(allMuseums())\r\n    },[finished, dispatch])\r\n    \r\n    const [ updateModalOpen, setUpdateModalOpen ] = useState<boolean>(false);\r\n    const [ reserveModalOpen, setReserveModalOpen ] = useState<boolean>(false);\r\n\r\n    const openModal = (admin: boolean): void => {\r\n        admin ? setUpdateModalOpen(true) : setReserveModalOpen(true)\r\n    }\r\n\r\n    const closeModal = (admin: boolean): void => {\r\n        admin ? setUpdateModalOpen(false) : setReserveModalOpen(false)\r\n    }\r\n\r\n    const updateCurrentTour = async (values: NewTour) => {\r\n        dispatch(updateTour(values, museumid, tourid))\r\n    }\r\n\r\n    const reserveTour = async (values: Omit<ReservedTour, '_id' | 'salary' | 'confirmed'| 'guide' | 'museum'>) => {\r\n        dispatch(addReservation(user._id, museum._id, values))\r\n    }\r\n\r\n\r\n    const handleUpdateSubmit = async (values: NewTour) => {\r\n        await updateCurrentTour(values)\r\n        closeModal(true);\r\n    }\r\n\r\n    const handleReserveSubmit = async (values:  Omit<ReservedTour, '_id' | 'salary' | 'confirmed' | 'guide' | 'museum'>) => {\r\n        await reserveTour(values)\r\n        closeModal(false);\r\n    }\r\n\r\n    if(!museum || !museum.offeredTours) {\r\n        return null\r\n    }\r\n    const tour = museum.offeredTours.find(t => t._id === tourid)\r\n\r\n    if(!tour) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header>{tour.tourName}</Header>\r\n            <Table celled>\r\n                <Table.Header>\r\n                    <Table.Row>\r\n                        <Table.HeaderCell name=\"information\">Tiedot</Table.HeaderCell>\r\n                        {(user && user.type === \"Admin\" && Object.values(user.museums).map(m => m._id).includes(museum._id)) &&\r\n                        <Table.HeaderCell textAlign=\"right\"> <Button name=\"openModal\" onClick={() => openModal(true)}>Muokkaa</Button> </Table.HeaderCell>}\r\n                        {(user && user.type === \"Customer\") &&\r\n                        <Table.HeaderCell textAlign=\"right\"> <Button name=\"openModal\" onClick={() => openModal(false)}>Varaa</Button> </Table.HeaderCell>}\r\n                        {((user && user.type === \"Guide\") || !user) && <Table.HeaderCell name=\"empty\"></Table.HeaderCell>}\r\n                    </Table.Row>\r\n                </Table.Header>\r\n                <Table.Body>\r\n                    <Table.Row>\r\n                        <Table.Cell name=\"tourName\">Nimi</Table.Cell>\r\n                        <Table.Cell name=\"nameValue\">{tour.tourName}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell name=\"tourLanguages\">Kielet</Table.Cell>\r\n                        <Table.Cell name=\"languageValue\">{tour.possibleLanguages.map(l => <p key={l}>{l}</p>)}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell name=\"tourLength\">Kesto</Table.Cell>\r\n                        <Table.Cell name=\"lengthValue\">{tour.lengthInMinutes}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell name=\"tourPrice\">Hinta</Table.Cell>\r\n                        <Table.Cell name=\"priceValue\">{tour.price}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell name=\"tourMax\">Maksimikoko</Table.Cell>\r\n                        <Table.Cell name=\"maxValue\">{tour.maxNumberOfPeople}</Table.Cell>\r\n                    </Table.Row>\r\n                    <Table.Row>\r\n                        <Table.Cell name=\"tourInfo\">Lisätiedot</Table.Cell>\r\n                        <Table.Cell name=\"infoValue\">{tour.tourInfo}</Table.Cell>\r\n                    </Table.Row>\r\n                </Table.Body>\r\n            </Table>\r\n            <UpdateTourModal\r\n                modalOpen={updateModalOpen}\r\n                onSubmit={handleUpdateSubmit}\r\n                onClose={() => closeModal(true)}\r\n                initialTour={tour}\r\n            />\r\n            <ReserveTourModal\r\n                modalOpen={reserveModalOpen}\r\n                onSubmit={handleReserveSubmit}\r\n                onClose={() => closeModal(false)}\r\n                tour={tour}\r\n                museum={museum}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TourPage","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { TextField } from '../../utils/FormFields'\r\nimport { Button } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    onSubmit: (values: {username: string, password: string}) => void;\r\n}\r\n\r\nconst initialValues: {username: string, password: string} = {\r\n    username: \"\",\r\n    password: \"\"\r\n}\r\n\r\nexport const LoginForm: React.FC<Props> = ({ onSubmit }) => {\r\n    return (\r\n        <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={(values, { resetForm }) => {\r\n            onSubmit(values)\r\n            resetForm()\r\n        }}\r\n        validate={ values => {\r\n            const errors: { [field: string]: string | object} = {};\r\n            if(values.username.length === 0) {\r\n                errors.username = \"Kenttä vaaditaan\"\r\n            }\r\n            if(values.password.length === 0) {\r\n                errors.password = \"Kenttä vaaditaan\"\r\n            }\r\n            return errors;\r\n        }}\r\n        >\r\n        {({ isValid, dirty }) => {\r\n            return(\r\n            <Form className=\"form ui\">\r\n                <Field\r\n                    label=\"Käyttäjänimi\"\r\n                    placeholder=\"Käyttäjä\"\r\n                    name=\"username\"\r\n                    component={TextField}\r\n                />\r\n                <Field\r\n                    label=\"Salasana\"\r\n                    placeholder=\"Salasana\"\r\n                    name=\"password\"\r\n                    component={TextField}\r\n                />\r\n                <Button id=\"loginButton\" type=\"submit\" name=\"submit\" disabled={!dirty || !isValid}>\r\n                       Kirjaudu sisään\r\n                </Button>\r\n            </Form>\r\n            )\r\n        }}\r\n        </Formik>\r\n    )\r\n}","import React from 'react'\r\nimport { Formik, Form, Field } from 'formik'\r\nimport { TextField, SelectField, ArrayField } from '../../utils/FormFields'\r\nimport { Button } from 'semantic-ui-react'\r\nimport { NewUser, OptionField } from '../../types'\r\n\r\ninterface Props {\r\n    onSubmit: (values: NewUser) => void;\r\n}\r\n\r\nconst initialValues: NewUser = {\r\n    name: \"\",\r\n    username: \"\",\r\n    password: \"\",\r\n    type: \"Customer\",\r\n    languages: [\"\"]\r\n}\r\nconst options: OptionField[] = [\r\n    {label: \"Asiakas\", value: \"Customer\"},\r\n    {label: \"Ylläpitäjä\", value: \"Admin\"},\r\n    {label: \"Opas\", value: \"Guide\"},\r\n]\r\n\r\nexport const RegisterationForm: React.FC<Props> = ({ onSubmit }) => {\r\n    return (\r\n        <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={(values, { resetForm }) => {\r\n            onSubmit(values)\r\n            resetForm()\r\n        }}\r\n        validate={ values => {\r\n            const errors: { [field: string]: string | object} = {};\r\n            if(values.username.length === 0) {\r\n                errors.username = \"Kenttä vaaditaan\"\r\n            }\r\n            if(values.password.length === 0) {\r\n                errors.password = \"Kenttä vaaditaan\"\r\n            }\r\n            if(values.name.length === 0) {\r\n                errors.name = \"Kenttä vaaditaan\"\r\n            }\r\n            if(values.type !== \"Admin\" && values.type !== \"Customer\" && values.type !== \"Guide\") {\r\n                errors.type = \"Käyttäjän täytyy kuulua johonkin ennalta valittuun ryhmään\"\r\n            }\r\n            return errors;\r\n        }}\r\n        >\r\n        {({ values, isValid, dirty }) => {\r\n            return(\r\n            <Form className=\"form ui\">\r\n                <Field\r\n                    label=\"Nimi\"\r\n                    placeholder=\"Nimi\"\r\n                    name=\"name\"\r\n                    component={TextField}\r\n                />\r\n                <Field\r\n                    label=\"Käyttäjänimi\"\r\n                    placeholder=\"Käyttäjä\"\r\n                    name=\"username\"\r\n                    component={TextField}\r\n                />\r\n                <Field\r\n                    label=\"Salasana\"\r\n                    placeholder=\"Salasana\"\r\n                    name=\"password\"\r\n                    component={TextField}\r\n                />\r\n                <SelectField\r\n                    label=\"Käyttäjätyyppi\"\r\n                    name=\"type\"\r\n                    options={options}\r\n                />\r\n\r\n                {values.type === \"Guide\" && \r\n                    <Field\r\n                        label=\"Kielitaito\"\r\n                        name=\"languages\"\r\n                        component={ArrayField}\r\n                        values={values.languages}\r\n                        fieldName=\"languages\"\r\n                    />\r\n                }\r\n                <Button id=\"registerationButton\" type=\"submit\" name=\"submit\" disabled={!dirty || !isValid}>\r\n                        Lisää käyttäjä\r\n                </Button>\r\n            </Form>\r\n            )\r\n        }}\r\n        </Formik>\r\n    )\r\n}","import axios from 'axios'\r\nimport { LoggedInUser } from '../types'\r\n\r\nconst baseUrl = '/api/login'\r\n\r\nconst login = async (username: string, password: string): Promise<LoggedInUser> => {\r\n    const res = await axios.post(baseUrl, {username, password})\r\n    return res.data\r\n}\r\n\r\n\r\nexport default {\r\n    login\r\n}","import React from 'react'\r\nimport { Header, Grid } from 'semantic-ui-react'\r\nimport { LoginForm } from './LoginForm'\r\nimport { RegisterationForm } from './RegisterationForm'\r\nimport loginService from '../../services/loginService'\r\nimport loginStorage from '../../utils/loginStorage'\r\nimport { NewUser } from '../../types'\r\nimport { useDispatch } from 'react-redux'\r\nimport { login } from '../../reducers/loginReducer'\r\nimport { addUser } from '../../reducers/userReducer'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { addNotification } from '../../reducers/notificationReducer'\r\n\r\nexport const LoginPage: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    const submitLogin = async (credentials: {username: string, password: string}) => {\r\n        const {username, password} = credentials;\r\n        try {\r\n            const loggedInUser = await loginService.login(username, password);\r\n            if(loggedInUser) {\r\n                loginStorage.saveUser(loggedInUser);\r\n            }\r\n            dispatch(login(loggedInUser));\r\n            history.push(`/user`)\r\n        } catch {\r\n            dispatch(addNotification({message: \"Väärät tunnukset\", error: true}))\r\n        }\r\n    }\r\n\r\n    const submitRegisteration = async (newUser: NewUser) => {\r\n        try {\r\n            dispatch(addUser(newUser));\r\n        } catch {\r\n            dispatch(addNotification({message: \"Käyttäjää ei voitu lisätä\", error: true}))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Header as=\"h1\">Kirjaudu sisään tai luo käyttäjä</Header>\r\n            <Grid id=\"basicGrid\" columns={2} relaxed=\"very\" stackable divided>\r\n                <Grid.Column>\r\n                    <LoginForm onSubmit={submitLogin}/>\r\n                </Grid.Column>\r\n                <Grid.Column>\r\n                    <RegisterationForm onSubmit={submitRegisteration}/>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React from 'react'\r\nimport { Menu } from 'semantic-ui-react'\r\nimport loginStorage from '../../utils/loginStorage'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { logout } from '../../reducers/loginReducer'\r\nimport { RootState } from '../../store'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst LogoutBar: React.FC = () => {\r\n    const dispatch = useDispatch()\r\n    const user = useSelector((state: RootState) => state.login)\r\n    const history = useHistory()\r\n\r\n    const toPage = (where: string) => {\r\n        history.push(`/${where}`)\r\n    }\r\n\r\n    const handleLogout = () => {\r\n        dispatch(logout())\r\n        loginStorage.logoutUser()\r\n        toPage('login')\r\n    }\r\n    \r\n    if (!user._id) {\r\n        return (\r\n            <div>\r\n                <Menu widths={3}>\r\n                    <Menu.Item id=\"logoutbarState\" header>Et ole kirjautunut sisään</Menu.Item>\r\n                    <Menu.Item name=\"mainPage\" onClick={() => toPage(\"find/museums\")}>Etusivu</Menu.Item>\r\n                    <Menu.Item name=\"login\" onClick={() => toPage('login')}>Kirjaudu sisään</Menu.Item>\r\n                </Menu>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Menu widths={4}>\r\n                <Menu.Item id=\"logoutbarState\" header>Kirjautunut sisään käyttäjänä {user.username}</Menu.Item>\r\n                <Menu.Item name=\"mainPage\" onClick={() => toPage(\"find/museums\")}>Etusivu</Menu.Item>\r\n                <Menu.Item name=\"userPage\" onClick={() => toPage(\"user\")}>Oma sivu</Menu.Item>\r\n                <Menu.Item name=\"logout\" onClick={handleLogout}>Kirjaudu ulos</Menu.Item>\r\n            </Menu>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LogoutBar","import React, { useEffect, useState } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../store'\r\nimport { MessageError } from '../../types'\r\nimport { Header } from 'semantic-ui-react'\r\n\r\nconst NotificationBar: React.FC = () => {\r\n    const state = useSelector((state: RootState) => state)\r\n    const [museums, setMuseums] = useState<MessageError>({message: \"\", error: false})\r\n    const [tours, setTours] = useState<MessageError>({message: \"\", error: false})\r\n    const [user, setUser] = useState<MessageError>({message: \"\", error: false})\r\n    const [notification, setNotification] = useState<MessageError>({message: \"\", error: false})\r\n\r\n    useEffect(() => {\r\n        setMuseums(state.museums.notification)\r\n        setTimeout(() => setMuseums({message: \"\", error: false}), 2000)\r\n    }, [state.museums.notification])\r\n\r\n    useEffect(() => {\r\n        setTours(state.tours.notification)\r\n        setTimeout(() => setTours({message: \"\", error: false}), 2000)\r\n    }, [state.tours.notification])\r\n\r\n    useEffect(() => {\r\n        setUser(state.users.notification)\r\n        setTimeout(() => setUser({message: \"\", error: false}), 2000)\r\n    }, [state.users.notification])\r\n\r\n    useEffect(() => {\r\n        setNotification(state.notification.notification)\r\n        setTimeout(() => setNotification({message: \"\", error: false}), 2000)\r\n    }, [state.notification.notification])\r\n\r\n    const show = [{...museums, key: 0}, {...tours, key: 1}, {...user, key: 2}, {...notification, key: 3}]\r\n    return (\r\n        <div>\r\n            {show.map((n: MessageError & {key: number}) => \r\n                <Header key={n.key}color={n.error ? \"red\" : \"blue\"}>{n.message}</Header>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotificationBar","import React, { useState, useEffect } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../store'\r\nimport { Museum } from '../../types'\r\nimport { Image, Card, Button, Header, Grid, GridColumn, Container, CardContent, Input } from 'semantic-ui-react'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nconst FindMuseums: React.FC = () => {\r\n    const [page, setPage] = useState(0)\r\n    const [search, setSearch] = useState(\"\")\r\n    const [museums, setMuseums] = useState<Museum[]>([])\r\n    const allMuseums = useSelector((state: RootState) => state.museums.museums)\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        if(!search) {\r\n            setMuseums(Object.values(allMuseums));\r\n        } else {\r\n            setMuseums(Object.values(allMuseums).filter((m: Museum) => m.museumName.toLocaleLowerCase().includes(search.toLocaleLowerCase())))\r\n        }\r\n    }, [search, allMuseums])\r\n\r\n    const changeSearch = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setSearch(event.target.value)\r\n    }\r\n\r\n    const toMuseum = (id: Museum['_id']) => {\r\n        history.push(`/museum/${id}`)\r\n    }\r\n\r\n    const numberOfPages = () => {\r\n        const length = Object.values(museums).length\r\n        if(length % 10 === 0) {\r\n            return length / 10\r\n        } else {\r\n            return (length - length % 10) / 10 + 1\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <Container textAlign='center'>\r\n                <Header>Löydä museoita</Header>\r\n                <Input placeholder=\"Hae museoita\" onChange={changeSearch} />\r\n                {museums.slice(0 + page*10, 10 + page*10).map((m: Museum) => \r\n                    <div key={m._id}>\r\n                        <Card centered>\r\n                            <Card.Content header={m.museumName} />\r\n                            {m.image && \r\n                            <CardContent>\r\n                                <Image src={`http://localhost:3001/uploads/${m.image}`} size=\"small\"/>\r\n                            </CardContent>}\r\n                            <Card.Content description={m.museumInfo} />\r\n                            <Card.Content extra>\r\n                                <Button onClick={() => toMuseum(m._id)}>Tarkastele</Button>\r\n                            </Card.Content>\r\n                        </Card>\r\n                    </div>\r\n                )}\r\n                <Grid id=\"pageNumbers\" centered>\r\n                    {Array.from(Array(numberOfPages()).keys()).map((n: number) => \r\n                        <GridColumn key={n}><p className=\"centerText\" onClick={() => setPage(n)}>{n + 1}</p></GridColumn>\r\n                    )}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FindMuseums","import React, { useState, useEffect } from 'react'\r\nimport { ReservedTour, Museum } from '../../types'\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store';\r\nimport { Header, GridColumn, Grid } from 'semantic-ui-react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { dateToString } from '../../utils/DateTimeFunctions';\r\n\r\nexport const EssentialInformation: React.FC<{tour: ReservedTour}> = ({tour}) => {\r\n    return (\r\n        <div>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Kierros: </h4></GridColumn>\r\n            <GridColumn>{tour.tourName}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Päivä: </h4></GridColumn>\r\n            <GridColumn>{dateToString(tour.date)}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Aika: </h4></GridColumn>\r\n            <GridColumn>{tour.time}</GridColumn>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const RestInformation: React.FC<{tour: ReservedTour}> = ({tour}) => {\r\n    return(\r\n        <div>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Ryhmä: </h4></GridColumn>\r\n            <GridColumn>{tour.groupName}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Kieli: </h4></GridColumn>\r\n            <GridColumn>{tour.chosenLanguage}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Varaajan sähköposti: </h4></GridColumn>\r\n            <GridColumn>{tour.email}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Hinta: </h4></GridColumn>\r\n            <GridColumn>{tour.price}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Maksutapa: </h4></GridColumn>\r\n            <GridColumn>{tour.paymentMethod}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Kesto: </h4></GridColumn>\r\n            <GridColumn>{tour.lengthInMinutes}min</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Osallistujia: </h4></GridColumn>\r\n            <GridColumn>{tour.numberOfPeople}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Ikäryhmä: </h4></GridColumn>\r\n            <GridColumn>{tour.groupAge}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Lisätietoja ryhmästä: </h4></GridColumn>\r\n            <GridColumn>{tour.groupInfo}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Lisätietoja opastuksesta: </h4></GridColumn>\r\n            <GridColumn>{tour.tourInfo}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Opas: </h4></GridColumn>\r\n            <GridColumn>{tour.guide.name}</GridColumn>\r\n            <GridColumn className=\"addTopMarginSmall\"><h4>Vahvistettu: </h4></GridColumn>\r\n            <GridColumn>{tour.confirmed?\"Kyllä\":\"Ei\"}</GridColumn>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ReservationPage: React.FC = () => {\r\n    const user = useSelector((state: RootState) => state.users.users[state.login._id]);\r\n    const { id } = useParams<{ id: string }>()\r\n    const [tour, setTour] = useState<ReservedTour | undefined>(undefined)\r\n\r\n    useEffect(() => {\r\n        if(user) {\r\n            if(user.type === \"Customer\") {\r\n                const existingTour = user.reservedTours.find((r: ReservedTour) => r._id === id)\r\n                setTour(existingTour)\r\n            }\r\n            if(user.type === \"Admin\") {\r\n                const museum = user.museums.find((m: Museum) => m.reservedTours.find((r: ReservedTour) => r._id === id))\r\n                if(museum) {\r\n                    setTour(museum.reservedTours.find((r: ReservedTour) => r._id  === id))\r\n                }\r\n            } \r\n        }\r\n    }, [id, user])\r\n\r\n    if(!user) {\r\n        return null\r\n    }\r\n\r\n    if(!tour) {\r\n        return null\r\n    }\r\n\r\n    return ( \r\n        <div>\r\n            <Header>Varattu kierros</Header>\r\n            <Grid id=\"basicGrid\" columns=\"1\">\r\n                <GridColumn>\r\n                    <EssentialInformation tour={tour}/>\r\n                    <RestInformation tour={tour}/>\r\n                </GridColumn>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReservationPage","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { RootState } from '../../../store';\r\nimport { useHistory } from 'react-router-dom';\r\nimport { Header, Grid, GridRow, GridColumn } from 'semantic-ui-react';\r\nimport { ReservedTour } from '../../../types';\r\nimport { dateToString } from '../../../utils/DateTimeFunctions';\r\n\r\nconst CustomerUserPage: React.FC = () => {\r\n    const user = useSelector((state: RootState) => state.users.users[state.login._id]);\r\n    const history = useHistory();\r\n\r\n    if(!user || user.type !== \"Customer\") {\r\n        return <div>Mitään ei löytynyt</div>\r\n    }\r\n    \r\n    const toReservation = (id: ReservedTour['_id']) => {\r\n        history.push(`/reservation/${id}`)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Grid id=\"basicGrid\" centered columns={1}>\r\n                <Header className=\"title\" textAlign='center'>{user.username}</Header>\r\n                <GridRow centered>\r\n                    <Header textAlign='center'>Varatut opastukset</Header>\r\n                </GridRow>\r\n                {user.reservedTours.map((r: ReservedTour) => \r\n                    <GridRow centered name=\"tourRow\" key={r._id} onClick={() => toReservation(r._id)} columns=\"3\">\r\n                        <GridColumn textAlign=\"center\">\r\n                            <h4>{r.tourName} </h4>\r\n                        </GridColumn>\r\n                        <GridColumn textAlign=\"center\">\r\n                            <p>{r.time} </p>\r\n                        </GridColumn>\r\n                        <GridColumn textAlign=\"center\">\r\n                            <p>{dateToString(r.date)}</p>\r\n                        </GridColumn>\r\n                    </GridRow>\r\n                )}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomerUserPage","import React from \"react\";\r\nimport { Grid, Button, Label } from \"semantic-ui-react\";\r\nimport { Field, Formik, Form } from \"formik\";\r\nimport { TextField, SelectField, ImageField } from \"../../../utils/FormFields\";\r\nimport { NewTour, NewMuseum, OptionField } from \"../../../types\";\r\n\r\nconst checkTimes = ({mon, tue, wed, thu, fri, sat, sun}: {mon: string, tue: string, wed: string, thu: string, fri: string, sat: string, sun: string}): boolean => {\r\n    if(!mon || !tue || !wed || !thu || !fri || !sat || !sun) {\r\n        return false\r\n    }\r\n    return true;\r\n}\r\n\r\nconst times = (): OptionField[] => {\r\n    let list: OptionField[] = [];\r\n    let h;\r\n    let m;\r\n    let hString: string;\r\n    let mString: string;\r\n    for(h = 0; h < 24; h++) {\r\n        for(m = 0; m < 60; m += 15) {\r\n            hString = h < 10 ? `0${h.toString()}` : h.toString()\r\n            mString = m === 0 ? `0${m.toString()}` : m.toString()\r\n            list = list.concat({label: `${hString}:${mString}`, value: `${hString}:${mString}`});\r\n        }\r\n    }\r\n    list = list.concat({label: `Suljettu`, value: `closed`})\r\n    return list;\r\n}\r\n\r\nconst days = [\r\n    {name: \"Maanantai\", value: \"mon\"},\r\n    {name: \"Tiistai\", value: \"tue\"},\r\n    {name: \"Keskiviikko\", value: \"wed\"},\r\n    {name: \"Torstai\", value: \"thu\"},\r\n    {name: \"Perjantai\", value: \"fri\"},\r\n    {name: \"Lauantai\", value: \"sat\"},\r\n    {name: \"Sunnuntai\", value: \"sun\"}\r\n]\r\n\r\ninterface Props {\r\n    onSubmit: (values: NewMuseum) => void;\r\n    onCancel: () => void;\r\n    initialTour?: NewTour\r\n}\r\n\r\nconst initialValues: NewMuseum = {\r\n    museumName: \"\",\r\n    museumInfo: \"\",\r\n    openInfo: \"\",\r\n    open: {\r\n        mon: \"\",\r\n        tue: \"\",\r\n        wed: \"\",\r\n        thu: \"\",\r\n        fri: \"\",\r\n        sat: \"\",\r\n        sun: \"\"\r\n    },\r\n    closed: {\r\n        mon: \"\",\r\n        tue: \"\",\r\n        wed: \"\",\r\n        thu: \"\",\r\n        fri: \"\",\r\n        sat: \"\",\r\n        sun: \"\"\r\n    },\r\n    location: \"\",\r\n    lat: 0,\r\n    long: 0,\r\n    image: undefined\r\n}\r\nexport const AddMuseumForm: React.FC<Props> = ({ onSubmit, onCancel }) => {\r\n    return (\r\n        <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={(values, { resetForm }) => {\r\n            onSubmit(values)\r\n            resetForm()\r\n        }}\r\n        validate={ values => {\r\n            const requiredError = \"Kenttä vaaditaan\";\r\n            const errors: { [field: string]: string | object} = {};\r\n            if(values.museumName.length === 0) {\r\n                errors.museumName = requiredError\r\n            }\r\n            if(!checkTimes(values.open)) {\r\n                errors.open = requiredError\r\n            }\r\n            if(!checkTimes(values.closed)) {\r\n                errors.closed = requiredError\r\n            }\r\n            if(!values.location) {\r\n                errors.location = requiredError\r\n            }\r\n            if(values.lat === 0) {\r\n                errors.lat = requiredError;\r\n            }\r\n            if(values.long === 0) {\r\n                errors.long = requiredError;\r\n            }\r\n            if(isNaN(values.lat)) {\r\n                errors.lat = \"Luvun täytyy olla numero\"\r\n            } else if(values.lat < -90 || values.lat > 90) {\r\n                errors.lat = \"Luvun täytyy olla -90 ja 90 välillä\"\r\n            }\r\n            if(isNaN(values.long)) {\r\n                errors.long = \"Luvun täytyy olla numero\"\r\n            } else if(values.long < -90 || values.long > 90) {\r\n                errors.long = \"Luvun täytyy olla -90 ja 90 välillä\"\r\n            }\r\n            \r\n            return errors;\r\n        }\r\n        }\r\n        >\r\n        {({ isValid, dirty, setFieldValue, setFieldTouched, values, errors, touched}) => {\r\n            return (\r\n                <Form className=\"form ui\">\r\n                    <Field\r\n                        label=\"Museon nimi\"\r\n                        placeholder=\"Museon nimi\"\r\n                        name=\"museumName\"\r\n                        component={TextField}\r\n                    />\r\n                    <Field\r\n                        label=\"Museon tiedot\"\r\n                        placeholder=\"Museon tiedot\"\r\n                        name=\"museumInfo\"\r\n                        component={TextField}\r\n                    />\r\n                    <Field\r\n                        label=\"Lisätietoja aukiolosta\"\r\n                        placeholder=\"Lisätietoja\"\r\n                        name=\"openInfo\"\r\n                        component={TextField}\r\n                    />\r\n                    <Field\r\n                        label=\"Sijainti\"\r\n                        placeholder=\"Sijainti\"\r\n                        name=\"location\"\r\n                        component={TextField}\r\n                    />\r\n                    <Field\r\n                        label=\"Leveyspiiri (latitude)\"\r\n                        placeholder=\"Leveyspiiri\"\r\n                        name=\"lat\"\r\n                        component={TextField}\r\n                    />\r\n                    <Field\r\n                        label=\"Pituuspiiri (longitude)\"\r\n                        placeholder=\"Pituuspiiri\"\r\n                        name=\"long\"\r\n                        component={TextField}\r\n                    />\r\n                    <ImageField\r\n                        name=\"image\"\r\n                    />\r\n                    <Grid className=\"addTopMargin\" columns={7} relaxed stackable >\r\n                        {days.map(d => \r\n                            <Grid.Column className=\"centerText\" key={d.value}>\r\n                                <div className=\"bottomMargin\">\r\n                                    <Label basic>{d.name}</Label>\r\n                                </div>\r\n                                <SelectField\r\n                                    label=\"Auki\"\r\n                                    name={`open.${d.value}`}\r\n                                    options={times()}\r\n                                />\r\n                                <SelectField\r\n                                    label=\"Kiinni\"\r\n                                    name={`closed.${d.value}`}\r\n                                    options={times()}\r\n                                />\r\n                            </Grid.Column>\r\n                        )}\r\n                    </Grid>\r\n                    <Grid>\r\n                        <Grid.Row centered className=\"addTopMarginSmall\" columns=\"2\">\r\n                            <Button id=\"submitMuseumModal\" type=\"submit\" name=\"submit\" disabled={!dirty || !isValid}>\r\n                                Lisää!\r\n                            </Button>\r\n                            <Button id=\"cancelMuseumModal\" onClick={onCancel} name=\"cancelForm\" color=\"red\">Peruuta</Button>\r\n                        </Grid.Row>\r\n                    </Grid>\r\n                </Form>\r\n            )\r\n        }}\r\n        </Formik>\r\n    )\r\n}\r\n\r\nexport default AddMuseumForm","import React from 'react'\r\nimport { Modal } from 'semantic-ui-react'\r\nimport { NewMuseum } from '../../../types'\r\nimport { AddMuseumForm } from './AddMuseumForm'\r\n\r\ninterface Props {\r\n    modalOpen: boolean;\r\n    onClose: () => void;\r\n    onSubmit: (values: NewMuseum) => void;\r\n}\r\n\r\nconst AddMuseumModal: React.FC<Props> = ({ modalOpen, onClose, onSubmit}: Props) => (\r\n    <Modal open={modalOpen} onClose={onClose} closeIcon>\r\n        <Modal.Header id=\"modalHeader\">Päivitä opastusta</Modal.Header>\r\n        <Modal.Content>\r\n            <AddMuseumForm onSubmit={onSubmit} onCancel={onClose}></AddMuseumForm>\r\n        </Modal.Content>\r\n    </Modal>\r\n)\r\n\r\nexport default AddMuseumModal","import React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { RootState } from '../../../store';\r\nimport { Grid, Header, Button } from 'semantic-ui-react';\r\nimport AddMuseumModal from './AddMuseumModal';\r\nimport { NewMuseum } from '../../../types';\r\nimport { addMuseum } from '../../../reducers/userReducer';\r\nimport { allMuseums } from '../../../reducers/museumReducer'\r\n\r\nexport const AdminPage: React.FC = () => {\r\n    const user = useSelector((state: RootState) => state.users.users[state.login._id]);\r\n    const dispatch = useDispatch();\r\n    const [ modalOpen, setModalOpen ] = useState<boolean>(false);\r\n    const finished = useSelector((state: RootState) => state.users.finished);\r\n    \r\n    useEffect(() => {\r\n        if(finished) {\r\n\r\n            dispatch(allMuseums())\r\n        }\r\n    }, [finished, dispatch])\r\n\r\n    if(!user || user.type !== \"Admin\") {\r\n        return <div>Mitään ei löytynyt</div>\r\n    }\r\n    const openModal = (): void => {\r\n        setModalOpen(true)\r\n    }\r\n    const closeModal = (): void => {\r\n        setModalOpen(false)\r\n    }\r\n\r\n    const dispatchAddMuseum = async (values: NewMuseum) => {\r\n\r\n        dispatch(addMuseum(values, user._id))\r\n    }\r\n\r\n    const handleSubmit = async (values: NewMuseum) => {\r\n        await dispatchAddMuseum(values)\r\n        closeModal()\r\n\r\n    }\r\n\r\n    \r\n\r\n    return (\r\n        <div id=\"adminPage\">\r\n            <Grid id=\"basicGrid\" columns={2} stackable textAlign='center'>\r\n                <Grid.Row>\r\n                    <Header>Käyttäjän {user.username} tiedot</Header>\r\n                </Grid.Row>\r\n                <Grid.Row className=\"addTopMargin\">\r\n                    <Grid.Column>\r\n                        <h4>Kaikki museot: </h4>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <h4>Käyttäjän tiedot: </h4>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row>\r\n                    <Grid.Column>\r\n                        {user.museums && user.museums.map(m => \r\n                            <div key={m._id}><Link to={`/museum/${m._id}`}>{m.museumName}</Link></div>\r\n                        )}\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Grid columns={2} stackable>\r\n                            <Grid.Column>\r\n                                <b>Nimi: </b>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <b>{user.name}</b>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <b>Käyttäjätunnus: </b>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <b>{user.username}</b>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <h4>Tyyppi: </h4>\r\n                            </Grid.Column>\r\n                            <Grid.Column>\r\n                                <b>{user.type}</b>\r\n                            </Grid.Column>\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                </Grid.Row>\r\n                <Grid.Row className=\"addTopMargin\">\r\n                    <Button id=\"addMuseumModalOpen\" onClick={openModal}>Lisää museo!</Button>\r\n                </Grid.Row>\r\n            </Grid>\r\n            <AddMuseumModal modalOpen={modalOpen} onSubmit={handleSubmit} onClose={closeModal}/>\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}","import React, { useState, useEffect } from 'react'\r\nimport { Header, Grid, GridRow, Button, Popup } from 'semantic-ui-react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { RootState } from '../../../store'\r\nimport { ReservedTour, Museum } from '../../../types'\r\nimport { EssentialInformation, RestInformation } from '../../ReservationPage'\r\nimport { confirmTour } from '../../../reducers/userReducer'\r\n\r\nconst TourPreview: React.FC<{r: ReservedTour}> = ({r}) => (\r\n    <div>\r\n        <GridRow>\r\n            <Popup\r\n                trigger={\r\n                    <div>\r\n                        <EssentialInformation tour={r} /> \r\n                    </div>\r\n                }\r\n            >\r\n                <Popup.Header>Kaikki tiedot</Popup.Header>\r\n                <Popup.Content>\r\n                    <RestInformation tour={r} />\r\n                </Popup.Content>\r\n            </Popup>\r\n        </GridRow>\r\n    </div>\r\n)\r\n\r\nconst GuideUserPage: React.FC<{}> = () => {\r\n    const dispatch = useDispatch()\r\n    const user = useSelector((state: RootState) => state.users.users[state.login._id])\r\n    \r\n\r\n    const [toursToShow, setToursToShow] = useState<ReservedTour[]>([]);\r\n\r\n    useEffect(() => {\r\n        if(user && user.type === \"Guide\") {\r\n            setToursToShow([]);\r\n            user.museums.forEach((m:Museum) => m.reservedTours.forEach((r: ReservedTour) => {\r\n                if(!r.confirmed) {\r\n                    setToursToShow(t => t.concat(r))\r\n                }\r\n            }))\r\n        }\r\n    }, [user])\r\n\r\n    if(!user || user.type !== \"Guide\") {\r\n        return null;\r\n    }\r\n\r\n    const userTours = user.reservedTours.map((r: ReservedTour) => r)\r\n    const takeTour = (tourId: string) => {\r\n        dispatch(confirmTour(tourId, user._id))\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        <div>\r\n            <Header>{user.name}</Header>\r\n            <Grid textAlign=\"center\">\r\n                <Grid.Row columns={1}>\r\n                    <Header>Opastukset</Header>\r\n                </Grid.Row>\r\n                <GridRow columns={3}>\r\n                    <Grid.Column>\r\n                        <Grid name=\"ownTours\" textAlign=\"center\">\r\n                            <GridRow columns={1}>\r\n                                <Header>Omat opastukset</Header>\r\n                            </GridRow>\r\n                            {userTours.length > 0 && userTours.map((r: ReservedTour) => {\r\n                            return(\r\n                                ((new Date(r.date) >= new Date())) \r\n                                ?\r\n                                    <div key={r._id}>\r\n                                        <TourPreview r={r} />\r\n                                    </div>\r\n                                : \r\n                                    null\r\n                            )  \r\n                            })}\r\n\r\n                            {userTours.length === 0 && <h3>Ei varattuja opastuksia</h3>}\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Grid name=\"freeTours\" textAlign=\"center\">\r\n                            <GridRow columns={1}>\r\n                                <Header>Vapaat opastukset</Header>\r\n                            </GridRow>\r\n                            {toursToShow.length > 0 && toursToShow.map((r: ReservedTour) => {\r\n                                return(\r\n                                    (!r.confirmed && (new Date(r.date) >= new Date())) \r\n                                    ?\r\n                                        <div key={r._id}>\r\n                                            <TourPreview r={r} />\r\n                                            <GridRow>\r\n                                                <Button onClick={() => takeTour(r._id)}>Varaa</Button>\r\n                                            </GridRow>\r\n                                        </div>\r\n                                    : \r\n                                        null\r\n                                )\r\n                            })}\r\n                            {toursToShow.length === 0 && <h3>Ei vapaita opastuksia</h3>}\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                    <Grid.Column>\r\n                        <Grid name=\"pastTours\" textAlign=\"center\">\r\n                            <GridRow columns={1}>\r\n                                <Header>Menneet opastukset</Header>\r\n                            </GridRow>\r\n                            {userTours.length > 0 && userTours.map((r: ReservedTour) => {\r\n                            return(\r\n                                (r.confirmed && (new Date(r.date) < new Date())) \r\n                                ?\r\n                                    <div key={r._id}>\r\n                                        <TourPreview r={r} />\r\n                                    </div>\r\n                                : \r\n                                    null\r\n                            )  \r\n                            })}\r\n\r\n                            {userTours.length === 0 && <h3>Ei menneitä opastuksia opastuksia</h3>}\r\n                        </Grid>\r\n                    </Grid.Column>\r\n                </GridRow>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GuideUserPage","import React from 'react'\r\nimport { useSelector } from 'react-redux';\r\nimport { RootState } from '../../store';\r\nimport CustomerUserPage from './CustomerUserPage';\r\nimport { AdminPage } from './AdminUserPage';\r\nimport GuideUserPage from './GuideUserPage';\r\n\r\n\r\n\r\nconst UserPage: React.FC = () => {\r\n    const user = useSelector((state: RootState) => state.users.users[state.login._id]);\r\n    if(!user) {\r\n        return <div id=\"emptyUserPage\"></div>;\r\n    }\r\n\r\n    if(user.type === \"Customer\") {\r\n        return <CustomerUserPage />\r\n    }\r\n\r\n    if(user.type === \"Admin\") {\r\n        return <AdminPage />\r\n    }\r\n\r\n    if(user.type === \"Guide\") {\r\n        return <GuideUserPage />\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default UserPage;","import React, { useEffect } from 'react';\nimport MuseumPage from './components/MuseumPage/index';\nimport { allTours } from './reducers/tourReducer';\nimport { useDispatch } from 'react-redux';\nimport { Container } from 'semantic-ui-react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport TourPage from './components/TourPage';\nimport { allMuseums } from './reducers/museumReducer';\nimport { LoginPage } from './components/LoginPage';\nimport loginStorage from './utils/loginStorage';\nimport { login } from './reducers/loginReducer';\nimport { getUsers } from './reducers/userReducer';\nimport LogoutBar from './components/Logout/LogoutBar';\nimport NotificationBar from './components/NotificationBar';\nimport FindMuseums from './components/FindMuseums';\nimport ReservationPage from './components/ReservationPage';\nimport UserPage from './components/UserPage';\nimport { getKey } from './reducers/keyReducer';\n\n\nfunction App() {\n  const dispatch = useDispatch();\n\n  useEffect(() =>{\n\n    dispatch(allTours())\n    dispatch(allMuseums())\n    dispatch(getUsers())\n    dispatch(getKey())\n    const user = loginStorage.loadUser()\n    if(user) {\n      dispatch(login(user));\n    }\n  },[dispatch])\n\n  return (\n    <div>\n      <Router>\n        <Container textAlign=\"center\">\n          <LogoutBar />\n          <NotificationBar />\n          <Switch>\n            <Route path=\"/login\" render={() => <LoginPage />}/>\n            <Route path=\"/museum/:museumid/tour/:tourid\" render={() => <TourPage />}/>\n            <Route path=\"/museum/:id\" render={() => <MuseumPage />}/>\n            <Route path=\"/user/\" render={() => <UserPage />}/>\n            <Route path=\"/find/museums\" render={() => <FindMuseums />}/>\n            <Route path=\"/reservation/:id\" render={() => <ReservationPage/>}/>\n          </Switch>\n        </Container>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './App';\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport \"./index.css\"\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}